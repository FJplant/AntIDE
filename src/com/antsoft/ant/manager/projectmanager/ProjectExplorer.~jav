/*
 * $Header: /AntIDE/source/ant/manager/projectmanager/ProjectExplorer.java 57    99-05-22 11:23p Remember $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 57 $
 */

package com.antsoft.ant.manager.projectmanager;
 
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Element;
import javax.swing.tree.DefaultMutableTreeNode;

import com.antsoft.ant.main.*;
import com.antsoft.ant.designer.codeeditor.*;
import com.antsoft.ant.pool.sourcepool.*;
import com.antsoft.ant.browser.sourcebrowser.*;
import com.antsoft.ant.codecontext.codeeditor.*;
import com.antsoft.ant.designer.classdesigner.*;
import com.antsoft.ant.property.*;
import com.antsoft.ant.property.projectproperty.*;
import com.antsoft.ant.compiler.Compiler;
import com.antsoft.ant.interpreter.Interpreter;
import com.antsoft.ant.util.Constants;
import com.antsoft.ant.util.EventHandlerListDlg;
import com.antsoft.ant.util.GetSetAddDialog;
import com.antsoft.ant.util.BorderList;
import com.antsoft.ant.runner.*;

/**
 *  class ProjectExplorer
 *
 *  @author Jinwoo Baek
 *  @author kim sang kyun
 */
public class ProjectExplorer extends JPanel
		implements SourceBrowserEventListener, EditFunctionEventListener {

  private ProjectPanel projectPanel;
	private SourceBrowser sourceBrowser;
  private OutputPanel outputPanel;
  private SourcePool sourcePool;
  private Project project;
  private EditorPane editorPane;

  // Opened File list
  private Vector openedList = new Vector(15, 5);
  private Vector openedListForSaveAll = new Vector(15, 5);

  // 가장 최근에 오픈되었던 source
  private SourceEntry lastOpenedSource;

  private TextViewPanel upperTvp, bottomTvp;
  private Point upperTvpPosition, bottomTvpPosition;

  // for GUI
  private JSplitPane sp1;
//  private JSplitPane sp2;
	private JSplitPane sp3;

  private Process p;
  private String[] cmd;
  private MainFrame mainFrm;
  private EditorStatusBar statusBar = new EditorStatusBar();

  public static final int PROJECT_PANEL = 1;
  public static final int SOURCE_BROWSER = 2;
  public static final int EDITOR_PANE = 3;

//  public JPanel sp2Wrapper;

	/**
	 *  Constructor
	 */
  public ProjectExplorer(Project prj, MainFrame frm, OutputPanel output) {
    setLayout(new BorderLayout());

    project = prj;
    mainFrm = frm;
    outputPanel = output;
    editorPane = new EditorPane( this );
    projectPanel = new ProjectPanel(this, project);
    sourceBrowser = new SourceBrowser(this);
    sourcePool = new SourcePool();

		sp3 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, projectPanel, sourceBrowser);
//    sp2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, null, null);
//    sp2Wrapper = new JPanel(new BorderLayout());
    //sp2Wrapper.add(opendFileListBar, BorderLayout.NORTH);
//    sp2Wrapper.add(sp2, BorderLayout.CENTER);
//    statusBar.setVisible(false);
//    sp2Wrapper.add(statusBar, BorderLayout.SOUTH);
//    sp2Wrapper.setBorder(BorderList.unselLineBorder);
    editorPane.setBorder(BorderList.unselLineBorder);

    sp1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sp3, editorPane);
    sp3.setDividerLocation( (int)((mainFrm.getSize().height * 0.8) / 2) );

		sp1.setDividerSize(4);
//		sp2.setDividerSize(4);
		sp3.setDividerSize(4);
		sp1.setOneTouchExpandable(true);
//		sp2.setOneTouchExpandable(true);
		sp3.setOneTouchExpandable(true);

    add(sp1, BorderLayout.CENTER);

		// Code Context에 등록한다
		mainFrm.getCodeContext().addSourceBrowserEventListener(this);
		mainFrm.getCodeContext().addEditFunctionEventListener(this);
  }

  public void setPosition(){
    sp3.setDividerLocation( (int)((mainFrm.getSize().height * 0.8) / 2) );
  }

  int prevComp = -1;
  public void setFocusedComponent(int type){
    if(prevComp == type) return;

    if(prevComp == PROJECT_PANEL) projectPanel.clearBorder();
    else if(prevComp == SOURCE_BROWSER) sourceBrowser.clearBorder();
    else if(prevComp == EDITOR_PANE) editorPane.setBorder(BorderList.unselLineBorder);

    if(type == PROJECT_PANEL) projectPanel.setSelLineBorder();
    else if(type == SOURCE_BROWSER) sourceBrowser.setSelLineBorder();
    else if(type == EDITOR_PANE) editorPane.setBorder(BorderList.selLineBorder);

    prevComp = type;
  }

	/**
	 *  프로젝트를 얻어온다.
	 */
	public Project getProject() {
		return project;
	}

  /**
   * default project인가 아닌가를 반환
   */
  public boolean isFilesTab(){
    return project.getProjectName().equals("Files");
  }

  /////////////////////////// ADD To PROJECT ///////////////////////////////


	/**
	 *  ProjectPanel에서의 요청을 처리하기 위한 함수
	 *  특정위치로 디렉토리이동을 한다.
	 *
	 *  @param path 특정 디렉토리에서 다이얼로그를 띄우게한다.
	 */
  void addToProject(String path, boolean modifiable) {

    if (path != null) {
      AddToProjectDialog dlg = new AddToProjectDialog(mainFrm, "Add to Project", true, new File(path));
      dlg.setVisible(true);

      if (dlg.isOK()) {
        File files[] = dlg.getSelectedFiles();
        ProjectFileEntry pfe = null;
        Vector addedFile = new Vector(10, 5);

        for (int i = 0; i < files.length; i++) {
          if (files[i] != null) {
            // 디렉토리를 선택했으면
            if (files[i].isDirectory()) {
              // 일단 ProjectPanel에 폴더를 추가한다.
              DefaultMutableTreeNode addedFolderNode = projectPanel.addFolder(files[i].getName());

              // 디렉토리 및의 소스 파일들을 찾고
              String[] list = files[i].list(new FilenameFilter() {
                public boolean accept(File dir, String filename) {
                  if (filename.endsWith(".java")) return true;
                  return false;
                }
              });

              // 위에서 만든 폴더 아래에 추가한다.
              for (int k = 0; k < list.length; k++) {
                File file = new File(files[i], list[k]);

                //project에 등록한다
                pfe = project.addFile(file.getParent(), file.getName());

                //이전에 등록되었던게 아니면
                if (pfe != null) {
                  projectPanel.addObject(addedFolderNode, pfe, false);
                  addedFile.addElement(pfe.getFullPathName());
                }
              }
            }
            // 파일을 선택했으면
            else {
              pfe = project.addFile(files[i].getParent(), files[i].getName());
              if (pfe != null) {
                projectPanel.addFileToProject(pfe);
                addedFile.addElement(pfe.getPath() + File.separator + pfe.getName());
              }
            }
          }
        }
        mainFrm.getCodeContext().fileAdded(addedFile);
      }
    }

    else {
			JFileChooser dlg = new JFileChooser();
			dlg.setFileFilter(new FileFilter() {
				public boolean accept(java.io.File file) {
					if (file.isDirectory() || file.getName().toLowerCase().endsWith(".java") ||
              file.getName().toLowerCase().endsWith("html") || file.getName().toLowerCase().endsWith("htm")) return true;
					else return false;
				}

				public String getDescription() {
					return "*.java";
				}
			});
			dlg.setMultiSelectionEnabled(true);
      dlg.setCurrentDirectory(new File(project.getPath()));

      dlg.setLocation(250, 300);
      dlg.setDialogTitle("Add File(s)...");

      if (dlg.showOpenDialog(mainFrm) == JFileChooser.APPROVE_OPTION) {
        File files[] = dlg.getSelectedFiles();
        Vector addedFile = new Vector(1, 1);

        ProjectFileEntry pfe = null;
        for (int i = 0; i < files.length; i++ ) {
          pfe = project.addFile(files[i].getParent(), files[i].getName());
          if (pfe != null) {
            projectPanel.addFileToProject(pfe);
            addedFile.addElement(pfe.getFullPathName());
          }
        }
        if ((files.length == 1) && (pfe != null)) editorPane.openDocument(pfe.getPath(), pfe.getName(), modifiable);
        if (files.length == 0) {
          File file = dlg.getSelectedFile();
          pfe = project.addFile(file.getParent(), file.getName());
          if (pfe != null) {
            projectPanel.addFileToProject(pfe);
            addedFile.addElement(pfe.getFullPathName());
            editorPane.openDocument(pfe.getPath(), pfe.getName(), modifiable);
          }
        }
        mainFrm.getCodeContext().fileAdded(addedFile);
      }
    }
  }

  public ProjectFileEntry addToProject(String pathName, String fileName, boolean modifiable) {
    ProjectFileEntry pfe = null;
    Vector addedFile = new Vector(1, 1);
    pfe = project.addFile(pathName, fileName);

    //이전에 없던 거였다면
    if (pfe != null) {
      projectPanel.addFileToProject(pfe);

      addedFile.addElement(pfe.getFullPathName());
      editorPane.openDocument(pathName, fileName, modifiable);
      mainFrm.getCodeContext().fileAdded(addedFile);
    }
    return pfe;
  }

  /////////////////////////// ADD To PROJECT ///////////////////////////////
  public ProjectFileEntry addNewFileToProject(String pathName, String fileName, boolean modifiable) {
    ProjectFileEntry pfe = null;
    if (fileName != null && pathName != null) {
      pfe = project.addFile(pathName, fileName);

      if (pfe != null) {
        projectPanel.addFileToProject(pfe);
        editorPane.openDocument(pathName, fileName, modifiable);
      }
    }
    return pfe;
  }

  /**
   * default project일경우만 해당된다. jdk source를 등록한다
   */
  public ProjectFileEntry addLibfileToProject(String fileName, JavaDocument doc){
    ProjectFileEntry pfe = project.addFile("Library", fileName);
    if(pfe == null) return null;

    SourceEntry libEntry = new SourceEntry("Library", fileName, doc);
    sourcePool.addSource(libEntry);

    projectPanel.addFileToDefaultProject(pfe);
    editorPane.openDocument("Library", fileName, false);
    return pfe;
  }


	/**
	 *  프로젝트에서 파일을 삭제한다.
	 */
  public void removeFromProject(ProjectFileEntry pfe) {

    //project file에서 삭제한다
    project.removeFile(pfe);

    //source pool에서 삭제 한다
    sourcePool.deleteSource(pfe.getFullPathName());

    //opened list에서 삭제 한다
    openedList.removeElement(pfe);

    //save all을 위한 opened list에서도 삭제한다
    openedListForSaveAll.removeElement(pfe);
  }

///////////////////// 컴파일 관련 시작 //////////////////////////////////////////////
	/**
	 *  현재 프로젝트를 컴파일한다.
	 */
	public void buildProject() {
		mainFrm.saveAllCurrent();
		Vector files = project.getFiles();
		compileFiles(files);
	}

	/**
	 *  지정된 파일들을 컴파일한다.
	 *
	 *  @param fileList 컴파일할 파일들
	 */
	public void compileFiles(Vector fileList) {

    Thread compileT = new CompileThread(fileList);
    compileT.setPriority(Thread.MIN_PRIORITY);
    compileT.start();
	}

  /**
   * Sun tools를 사용한 compiler Thread
   *
   * @author kim sang kyun
   */
  class CompileThread extends Thread{
    Vector fileList;

    public CompileThread( Vector files ){
      fileList = files;
    }

    public void run(){
    	Compiler com = new Compiler(project);
      if (com != null) {
		  	if (outputPanel != null) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
    			  	mainFrm.showOutputDialog();
            }
          });
  			}
       	com.compile(fileList, outputPanel);
      }
    }
  }

	/**
	 *  소스 파일을 컴파일한다.
	 */
  public void compileFile(String pathName, String fileName) {
  	if (fileName.endsWith(".java")) {
			save();
  	  Vector file = new Vector(1, 1);
    	ProjectFileEntry pfe = project.getFileEntry(pathName, fileName);
	    if (pfe != null) {
  	  	file.addElement(pfe);
    	  compileFiles(file);
	    }
    }
  }
  /**
	 *  주어진 html file을 이용해서 appletviewer를 실행한다.
	 *
	 *  @param fileName html file 이름
	 */
  public void runApplet(String pathName, String fileName) {
   AppletRunner runner = new AppletRunner(project);
   if(runner != null) {
      if(outputPanel != null) {
         mainFrm.showOutputDialog();
      }
      runner.appletRun(pathName, fileName, outputPanel);
    }  
  }

	/**
	 *  주어진 클래스를 실행한다.
	 *
	 *  @param className 실행할 클래스 이름
	 */
	public void runClass(String className) {
    Interpreter intptr = new Interpreter(project);
    if (intptr != null) {
    	if (outputPanel != null) {
      	mainFrm.showOutputDialog();
      }
      intptr.interpret(className, outputPanel);
    }
	}

	/**
	 *  실행한 프로세스를 죽인다.
	 */
	public void killProcess() {
		if (p != null) p.destroy();
	}

///////////////////// 컴파일 관련 끝//////////////////////////////////////////////
	/**
	 *  Source를 보여준다
	 *
	 *  @param se 보여줄 소스
	 *  @param modifiable 열 파일을 수정할 수 있도록 할건지 선택
	 */
/*
  public void openDocument(SourceEntry se, boolean modifiable) {
    TextViewPanel focusedTvp = null;

    statusBar.setVisible(true);
    //아래 경우들은 처음으로 오픈을 할때를 나타낸다. 이럴경우 같은 파일을
    //위아래에 뿌려준다
    if(sp2.getTopComponent() == null) {

      int location = sp2.getDividerLocation();

      upperTvp = new TextViewPanel(this, TextViewPanel.UPPER, statusBar);
      upperTvp.setSourceEntry(se);

      sp2.setTopComponent(upperTvp);
      sp2.setDividerLocation(location);

      location = sp2.getDividerLocation();
      bottomTvp = new TextViewPanel(this, TextViewPanel.BOTTOM, statusBar);
      bottomTvp.setSourceEntry(se);

      sp2.setBottomComponent(bottomTvp);
      sp2.setDividerLocation(location);

      focusedTvp = bottomTvp;
    }
    else{
      focusedTvp = getCurrentTvp();
      focusedTvp.setSourceEntry(se);
    }

    if (!modifiable) focusedTvp.getEditor().setEditable(false);
    else focusedTvp.getEditor().setEditable(true);

    boolean found = false;

    ProjectFileEntry pf = project.getFileEntry(se.getPath(), se.getName());
    for (int i = 0; i < openedList.size(); i++) {
      ProjectFileEntry pfe = (ProjectFileEntry)openedList.elementAt(i);
      if (pfe != null && pfe.equals(pf)) {
        found = true;
        break;
      }
    }

    if (!found) {
      openedList.addElement(pf);
      openedListForSaveAll.addElement(pf);
    }

    fileSelected(se);
    mainFrm.setCaptionText(project.getProjectName() + " - "	+ se.getPath() + File.separator + se.getName());

    //가장 최근에 오픈된 source를 갱신한다
    lastOpenedSource = se;
  }
*/
	/**
	 *  소스 파일을 에디터에 연다
	 */
/*
  public void openDocument(String pathName, String fileName, boolean modifiable) {
    SourceEntry se = sourcePool.getSource(pathName, fileName);
    if (se != null) openDocument(se, modifiable);
 }

*/
  /**
   * 위, 아래 TextViewPanel을 화면에서 제거하고 sourcepool에서는 제거하지 않는다 (Side Effect때문)
   * source browser내용도 제거한다
   */
/*
  public void closeDocument() {
    if(sp2.getTopComponent() != null) sp2.remove(upperTvp);
    if(sp2.getBottomComponent() != null) sp2.remove(bottomTvp);
    if(sourceBrowser != null) sourceBrowser.clear();
    statusBar.setVisible(false);
  }
*/
////////////////////////// 저장 관련 시작 /////////////////////////////////////

	/**
	 *  세이브를 수행한다.
   *
   *  @return saved file
	 */
/*
	public String save() {

    String savedFile = null;
    TextViewPanel focusedTvp = getCurrentTvp();
  	if (focusedTvp != null) {
    	SourceEntry se = focusedTvp.getSourceEntry();
      if (se != null)	{
        save(se);
        savedFile = se.getFullPathName();
      }
    }

    return savedFile;
	}
*/
  /**
   * Mainframe의 save all menu가 선택되었을때 동작
   */
/*
  public int saveAll(){
    int savedCount=0;
		for (int i = 0; i < openedListForSaveAll.size(); i++) {
			ProjectFileEntry pfe = (ProjectFileEntry)openedListForSaveAll.elementAt(i);
			SourceEntry se = sourcePool.getSource(pfe);
      if(se.isModified()){
  		  se.saveFile();
        pfe.syncLastModifiedTimeWithRealFile();
        mainFrm.getCodeContext().modifyTableWhenSaveFile(true);
        savedCount++;
      }
    }
    return savedCount;
  }
*/
	/**
	 *  지정한 파일을 세이브한다.
	 */
/*
  public void save(SourceEntry se) {
    se.saveFile();
    ProjectFileEntry pfe = project.getFileEntry(se.getPath(), se.getName());
    pfe.syncLastModifiedTimeWithRealFile();
    if (mainFrm != null) mainFrm.getCodeContext().modifyTableWhenSaveFile(true);
  }
*/
	/**
	 *  Save As를 수행한다.
	 */
/*
  public String saveAs() {

    String savedFile = null;

    TextViewPanel focusedTvp = getCurrentTvp();
    if(focusedTvp == null) return null;

    SourceEntry se = focusedTvp.getSourceEntry();
    ProjectFileEntry pfe = project.getFileEntry(se.getPath(), se.getName());
    if (se != null && pfe != null) {
      FileDialog dlg = new FileDialog(mainFrm);
      dlg.setMode(FileDialog.SAVE);
      dlg.setDirectory(se.getPath());
      dlg.setFile(se.getName());
      dlg.show();
      String file = dlg.getFile();
      if (file != null) {
        String directory = dlg.getDirectory();
        se.setFile(directory, file, true);
        project.removeFile(pfe);
        projectPanel.removeNode(pfe);
        File f = new File(directory, file);
        ProjectFileEntry newFE = new ProjectFileEntry(f.getParent(), f.getName());
        project.addFile(newFE);
        projectPanel.addFileToProject(newFE);
        project.isModified = true;
        se.saveFile();
        openDocument(pfe.getPath(), pfe.getName(), true);
        projectPanel.repaint();

        savedFile= se.getFile().getAbsolutePath();
      }
    }

    return savedFile;
  }
*/
  ////////////////////////// 저장 관련 끝 /////////////////////////////////////


	/** COPY action */
/*
  public void copy() {
    TextViewPanel focusedTvp = getCurrentTvp();
    if (focusedTvp != null) focusedTvp.copy();
  }
*/
	/** CUT action */
/*
  public void cut() {
    TextViewPanel focusedTvp = getCurrentTvp();
    if (focusedTvp != null) focusedTvp.cut();
  }
*/
	/** PASTE action */
/*
  public void paste() {
    TextViewPanel focusedTvp = getCurrentTvp();
    if (focusedTvp != null) focusedTvp.paste();
  }
*/
	/** UNDO action */
/*
  public void undo() {
    TextViewPanel focusedTvp = getCurrentTvp();
    if (focusedTvp != null) focusedTvp.undo();
  }
*/
	/** REDO action */
/*
  public void redo() {
    TextViewPanel focusedTvp = getCurrentTvp();
    if (focusedTvp != null) focusedTvp.redo();
  }
*/
	/**
	 *  가장 최근에 오픈된  소스를 반환한다
	 *
	 *  @return SourceEntry 현재 열린 소스
	 */
/*
	public SourceEntry getLastOpenedSource() {
    return lastOpenedSource;
	}
*/
  /**
   * 포커스를 얻은 TextViewPanel의 source와 최근에 선택된 파일이
   * 다를때, 그 source가 트리에서 선택된 효과를 준다
   */
/*
  public void focusOfTextViewPanelChanged(SourceEntry focusedSE){
    if(lastOpenedSource != focusedSE){
      fileSelected(focusedSE);
      lastOpenedSource = focusedSE;

      bottomTvp.hidePopups();
      upperTvp.hidePopups();
    }

    else if(upperTvp.getSourceEntry() == bottomTvp.getSourceEntry()){
      bottomTvp.hidePopups();
      upperTvp.hidePopups();
    }
  }
*/
  /**
   * 현재 포커스를 얻은 TextViewPanel을 반환
   */
  public TextViewPanel getCurrentTvp(){
    return editorPane.getCurrentTvp();
    //return (TextViewPanel.focusedPosition.equals(TextViewPanel.UPPER) ? upperTvp : bottomTvp);
  }

	/**
	 *  ClassDesigner에서 생성된source
	 */

	public void NewCodeGenerated(String source, String packageName, String className) {
    String sourceRoot = project.getPathModel().getSourceRoot();
    String fileName = className + ".java";
    String relativePath = "";

    if (packageName != null) {
      StringTokenizer st = new StringTokenizer(packageName);
      StringBuffer sb = new StringBuffer();
      while(st.hasMoreTokens()) {
        String token = st.nextToken(".");
        if ((token != null) && (token != "")) sb.append(token + File.separator);
        else break;
      }
      relativePath = sb.toString();
    }

    if(sourceRoot == null){
      String path = IdePropertyManager.GENERATED_SOURCE_ROOT_DIR+File.separator+relativePath;

      //file save한다

      //sourcepool에 등록
      SourceEntry entry = sourcePool.newSource(path, fileName, source);
      mainFrm.getCodeContext().setSourceEntry(entry);

      //project에 등록 하고 오픈한다
      ProjectFileEntry pfe = addNewFileToProject(path, fileName, true);
      //pfe.syncLastModifiedTimeWithRealFile();
    }
    else {
      if(!sourceRoot.endsWith(File.separator)) sourceRoot = sourceRoot + File.separator;
      String path = sourceRoot + relativePath;

      //file save한다

      //sourcepool에 등록
      SourceEntry entry = sourcePool.newSource(path, fileName, source);
      mainFrm.getCodeContext().setSourceEntry(entry);

      //project에 등록 하고 오픈한다
      ProjectFileEntry pfe = addNewFileToProject(path, fileName, true);
      //pfe.syncLastModifiedTimeWithRealFile();
    }
  }

	/**
	 *  CodeContext로부터 넘어오는 Edit관련 Event를 처리한다.
	 *
	 *  @param event 추가할 Item들이 들어있다.
	 */
	public void insertEvent(SourceBrowserEvent event) {
		if (ProjectManager.getCurrentProject().equals(this.project)) {
			if ((event != null) && (sourceBrowser != null)) {
				EventContent content = event.firstEvent();
				do {
					if (content != null) {
						switch (content.getContentType()) {
						case EventContent.CLASS:
							sourceBrowser.addClassNode(content.getContent());
							break;
						case EventContent.INTERFACE:
							sourceBrowser.addInterfaceNode(content.getContent());
							break;
						case EventContent.ATTR:
							sourceBrowser.addAttributeNode(content.getContent());
							break;
						case EventContent.OPER:
							sourceBrowser.addOperationNode(content.getContent());
							break;
						case EventContent.INNER:
							sourceBrowser.addInnerClassNode(content.getContent());
							break;
						case EventContent.IMPORT:
							sourceBrowser.addImportNode(content.getContent());
							break;
						case EventContent.PACKAGE:
							sourceBrowser.addImportNode(content.getContent());
							break;
						default:
						}
					} else {
						break;
					}
				} while (event.hasMoreEvents() && ((content = event.nextEvent()) != null));

        sourceBrowser.setPositionToLeftTop();
			}
		}
	}

	public void replaceEvent(SourceBrowserEvent event) {
		if (ProjectManager.getCurrentProject().equals(this.project)) {
		}
	}

	/**
	 *  CodeContext로부터 넘어오는 Edit관련 Event를 처리한다.
	 *
	 *  @param event 삭제할 Item들이 들어있다.
	 */
	public void removeEvent(SourceBrowserEvent event) {
		if (ProjectManager.getCurrentProject().equals(this.project)) {
			if (event != null) {
				EventContent content = event.firstEvent();
				do {
					if (content != null) {
						switch (content.getContentType()) {
						case EventContent.CLASS:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.CLASSNODE);
							break;
            case EventContent.INTERFACE:
            	sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.INTERFACENODE);
              break;
						case EventContent.ATTR:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.FIELDNODE);
							break;
						case EventContent.OPER:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.METHODNODE);
							break;
						case EventContent.INNER:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.INNERCLASSNODE);
							break;
						case EventContent.IMPORT:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.LIBNODE);
							break;
						case EventContent.PACKAGE:
							sourceBrowser.removeNode(content.getContent(), SourceBrowserTreeEntry.PACKAGENODE);
							break;
						default:
						}
					}
					else break;
				} while (event.hasMoreEvents() && ((content = event.nextEvent()) != null));
			}
		}
	}

	/**
	 *  SourceBrowser 를 clear 한다.
	 */
	public void clearEvent() {

		if (ProjectManager.getCurrentProject().equals(this.project) && (sourceBrowser != null)) {
			sourceBrowser.removeAll();
			sourceBrowser.repaint();
		}
	}

	public void showEventList(EditFunctionEvent event) {
		// Event 자체를 넘겨주는 것은 좋지 못한 것 같다.
		// 다른 곳에 쓰일 수 있도록 범용성을 주는 것이 나을 것 같다.
		// Event에서 값들을 뽑아서 보내는 것이 낫겠군.
		Vector eventValues = new Vector();
    TextViewPanel focusedTvp = getCurrentTvp();

		switch(event.getEventType()) {
		// Intellisense Event의 경우
		case EditFunctionEvent.INTELLISENSE:
			eventValues.addElement(event.firstEvent());
			while(event.hasMoreEvents())
				eventValues.addElement(event.nextEvent());

			if (focusedTvp != null) {
        focusedTvp.showIntellisense(eventValues, mainFrm);
      }
			break;

		// Parameterizing Event의 경우
		case EditFunctionEvent.PARAMETERING:
			eventValues.addElement(event.firstEvent());
			while(event.hasMoreEvents())
				eventValues.addElement(event.nextEvent());

			if (focusedTvp != null) focusedTvp.showParameterizing(eventValues, mainFrm);
			break;
		}
	}

	/** MainFrame의 레퍼런스를 얻어온다. */
	public MainFrame getMainFrame() {
		return mainFrm;
	}

	/**
	 *  새로운 파일이 선택되었을 때 처리(주로 SourceBrowser를 위함)
	 *
	 *  @param se 선택된 파일 소스
	 */
	public void fileSelected(SourceEntry se) {

		if (se != null) {

    	boolean status = false;
			outputPanel.setText("");
			mainFrm.displayMessageAtStatusBar(" ");

      // sourcebrowser의 내용을 지운다
      sourceBrowser.clear();
      sourceBrowser.setSourceName(se.getName());

			projectPanel.setSelectionFile(se.getPath(), se.getName());
      TextViewPanel focusedTvp = getCurrentTvp();

			if (mainFrm.getCodeContext() != null) {
        mainFrm.getCodeContext().setSourceEntry(se);
      }

			if (focusedTvp != null) {
        focusedTvp.requestFocus();
      }
		}
		this.repaint();
	}

	/**
	 *  특정위치로 Caret을 옮길때
	 *
	 *  @param int 옮길 offset
	 */
	public void moveCaret(int offset) {

    TextViewPanel focusedTvp = getCurrentTvp();
		if (focusedTvp != null) focusedTvp.moveCaret(offset, true);
	}

	/**
	 *  케럿을 특정 라인으로 이동한다.
	 */
	public void moveLine(int line) {
    TextViewPanel focusedTvp = getCurrentTvp();
		if (focusedTvp != null) focusedTvp.moveLine(line, true);
	}

	/**
	 *
	 */
	public void sourceBrowserSelection(String parent,String selected) {
		mainFrm.getCodeContext().sourceBrowserSelection(parent,selected);
	}

	/**
	 *  Code Context에서 처리한 indent를 보여주기 위해 해당
	 *  소스를 다시 읽어들인다.
	 */
	public void notifyChangeDocument() {
		if ((project != null) && ProjectManager.getCurrentProject().equals(this.project)) {
      TextViewPanel focusedTvp = getCurrentTvp();
			if (focusedTvp != null) focusedTvp.getEditor().setDocument(focusedTvp.getSourceEntry().getDocument());
		}
	}

  public void addHandler(String className) {
    TextViewPanel focusedTvp = getCurrentTvp();

    if(focusedTvp!=null && focusedTvp.getEditorStatusBar().isReadOnlyMode()){
      JOptionPane.showMessageDialog(null, "Current file is Read Only", "alert", JOptionPane.ERROR_MESSAGE);
      return;
    }

    EventHandlerListDlg dlg = new EventHandlerListDlg();
    dlg.showWindow();
    SourceEntry se = getLastOpenedSource();
    if (dlg.isOK() && se != null) {
    	JavaDocument doc = se.getDocument();
      try {
        int offsetInserted = mainFrm.getCodeContext().getInsertPosition(className);
        doc.insertString(offsetInserted, dlg.getGeneratedSource());

        if(dlg.isBeautifyOn()) mainFrm.getCodeContext().indentingDocument();
      } catch (javax.swing.text.BadLocationException e) {
				System.err.println(e);
      }
    }
  }

  public void addMethod(String className) {
    TextViewPanel focusedTvp = getCurrentTvp();

    if(focusedTvp!=null && focusedTvp.getEditorStatusBar().isReadOnlyMode()){
      JOptionPane.showMessageDialog(null, "Current file is Read Only", "alert", JOptionPane.ERROR_MESSAGE);
      return;
    }

    MethodDialog dlg = new MethodDialog(MainFrame.mainFrame, "Method Add Dialog", true, MethodDialog.ADD);
    dlg.setVisible(true);

    SourceEntry se = getLastOpenedSource();
    if (dlg.isOK() && se != null) {

    	JavaDocument doc = se.getDocument();
      try {
        int offsetInserted = mainFrm.getCodeContext().getInsertPosition(className);
        doc.insertString(offsetInserted, dlg.getGeneratedSource());

      } catch (javax.swing.text.BadLocationException e) {
	  		System.err.println(e);
      }
    }
  }

  public void addGetSetMethod(JTree tree, DefaultMutableTreeNode currNode) {
    TextViewPanel focusedTvp = getCurrentTvp();

    if(focusedTvp!=null && focusedTvp.getEditorStatusBar().isReadOnlyMode()){
      JOptionPane.showMessageDialog(null, "Current file is Read Only", "alert", JOptionPane.ERROR_MESSAGE);
      return;
    }

    GetSetAddDialog dlg = new GetSetAddDialog();
    dlg.setTreeAndNode(tree, currNode);
    dlg.showDialog();

    SourceEntry se = getLastOpenedSource();
    if (dlg.isOK() && se != null) {

    	JavaDocument doc = se.getDocument();
      try {
        int offsetInserted = mainFrm.getCodeContext().getInsertPosition(currNode.toString());
        doc.insertString(offsetInserted, dlg.getGeneratedSource());

      } catch (javax.swing.text.BadLocationException e) {
	  		System.err.println(e);
      }
    }
  }


  public void addMain(String className) {
    TextViewPanel focusedTvp = getCurrentTvp();

    if(focusedTvp!=null && focusedTvp.getEditorStatusBar().isReadOnlyMode()){
      JOptionPane.showMessageDialog(null, "Current file is Read Only", "alert", JOptionPane.ERROR_MESSAGE);
      return;
    }

    String gap = "\t";
    StringBuffer source = new StringBuffer();


    source.append("\n\n");
    source.append(gap + "/**" + "\n");
    source.append(gap + " * " + "Main method" + "\n");
    source.append(gap + " * " + "\n");
    source.append(gap + " * " + "@param args" + " command line arguments" + "\n");
    source.append(gap + " */" + "\n");

    source.append(gap + "public static void main( String [] args )" + "\n");
    source.append(gap + "{" + "\n");
    source.append(gap + gap + "// TO DO" + "\n");
    source.append(gap + "}" );
    source.append("\n");

    SourceEntry se = getLastOpenedSource();
    if (se != null) {
    	JavaDocument doc = se.getDocument();
      try {
        int offsetInserted = mainFrm.getCodeContext().getInsertPosition(className);
        doc.insertString(offsetInserted, source.toString());

      } catch (javax.swing.text.BadLocationException e) {
	  		System.err.println(e);
      }
    }
  }

  public void addField(String className) {
    TextViewPanel focusedTvp = getCurrentTvp();

    if(focusedTvp!=null && focusedTvp.getEditorStatusBar().isReadOnlyMode()){
      JOptionPane.showMessageDialog(null, "Current file is Read Only", "alert", JOptionPane.ERROR_MESSAGE);
      return;
    }

    FieldDialog dlg = new FieldDialog(MainFrame.mainFrame, "Field Add Dialog", true, FieldDialog.ADD);
    dlg.setVisible(true);

    SourceEntry se = getLastOpenedSource();
    if (dlg.isOK() && se != null) {

    	JavaDocument doc = se.getDocument();

      try {
        // getter insert
        int offsetOfGetter = mainFrm.getCodeContext().getInsertPosition(className);
        String getter = dlg.getGeneratedGetterMethodSource();
        if(getter != null) doc.insertString(offsetOfGetter, getter);

        // setter insert
        int offsetOfSetter = mainFrm.getCodeContext().getInsertPosition(className);
        String setter = dlg.getGeneratedSetterMethodSource();
        if(setter != null) doc.insertString(offsetOfSetter, setter);

        //field insert
        //TO DO
        int offsetOfField = mainFrm.getCodeContext().getInsertPosition(className);
        String field = dlg.getGeneratedFieldSource();
        doc.insertString(offsetOfField, field);

      } catch (javax.swing.text.BadLocationException e) {
	  		System.err.println(e);
      }
    }
  }


  public void showProperty() {
		ProjectPropertyDlg dlg = new ProjectPropertyDlg(mainFrm, project.getProjectName(), true);

		dlg.setCompilerModel(project.getCompilerModel());
		dlg.setInterpreterModel(project.getInterpreterModel());

		dlg.setPathModel(project.getPathModel());
		dlg.setVisible(true);
		if (dlg.isOK()) {
			if (project != null) project.setPathModel(dlg.getPathModel());
		}
  }

  public SourcePool getSourcePool(){
    return sourcePool;
  }

  public void gotoLine() {
    TextViewPanel focusedTvp = getCurrentTvp();
  	if (focusedTvp != null) focusedTvp.gotoLine(mainFrm);
  }

	public void updateEnvironment() {
    if(upperTvp != null) upperTvp.reloadEnvironment();
    if(bottomTvp != null) bottomTvp.reloadEnvironment();
	}

	/**
	 *  프로젝트 종료시 처리할 것들
	 */
/*
	public boolean canClose(Frame owner) {

    //다이얼로그를 만든다
    ProjectClosingDlg dlg = new ProjectClosingDlg(mainFrm, "Save " + project.getProjectName());

    //마지막 save한후 open된 파일들에 대해서 검사한다
    for (int i = 0; i < openedListForSaveAll.size(); i++) {
      ProjectFileEntry pfe = (ProjectFileEntry)openedListForSaveAll.elementAt(i);

      SourceEntry se = sourcePool.getSource(pfe);
      if(se.isModified()){
        dlg.addItem(pfe);
      }
    }

    //project file을 검사한다
    if (project.isModified()) dlg.addItem(project);

    //다이얼로그를 띄운다
    dlg.setLocation(300, 300);
    if (dlg.doesContainItem()) dlg.setVisible(true);
    else return true;

    if (dlg.isOK()) {
      Vector item = dlg.getItems();
      for (int i = 0; i < item.size(); i++) {
        Object obj = item.elementAt(i);
        if (obj instanceof ProjectFileEntry) {
          ProjectFileEntry pfe = (ProjectFileEntry)obj;
          SourceEntry se = sourcePool.getSource(pfe);
          if (se != null) {
            save(se);
            pfe.syncLastModifiedTimeWithRealFile();
          }
        }
        else if (obj instanceof Project){ ProjectManager.saveProject(project); }
      }

      dlg.dispose();
      return true;
    }

    return false;
	}
*/
  public void clearSourcePool(){
     sourcePool.deleteAll();
     sourcePool = null;
  }


  public Vector getOpenedProjectFileEntryListForSaveAll(){
    return openedListForSaveAll;
  }

  public void resetOpenedProjectFileEntryListForSaveAll(){
    openedListForSaveAll.removeAllElements();

    TextViewPanel curr = getCurrentTvp();
    if(curr!=null){
      SourceEntry se = curr.getSourceEntry();
      if(se!=null){
        openedListForSaveAll.addElement(project.getFileEntry(se.getPath(), se.getName()));
      }
    }
  }

  public Vector getTotalOpenedList(){
    return openedList;
  }

  /**
   * 외부에서 파일이 변경되었는지를 체크한다
   */
/*
  public void checkExternalFileUpdate(){
    Vector allFiles = project.getFiles();

    if(allFiles == null) return;
    for(int i=0; i<allFiles.size(); i++){
      ProjectFileEntry pfe = (ProjectFileEntry)allFiles.elementAt(i);
      File f = new File(pfe.getPath(), pfe.getName());
      if(pfe.isExternallyChanged()){

        int op = JOptionPane.showConfirmDialog(mainFrm, f.getAbsolutePath() +
                                  " is updated. Reload it?",
                                  "Externally Updated", JOptionPane.YES_NO_OPTION);

        if (op == JOptionPane.YES_OPTION) {
          SourceEntry newEntry = sourcePool.getSourceWhenExternallyUpdated(pfe);
          if(newEntry != null){
            if(getCurrentTvp().getSourceEntry().equals(newEntry)) {
              System.out.println("SetSource Entry");

              // sourcebrowser의 내용을 지운다
              sourceBrowser.clear();
              sourceBrowser.setSourceName(newEntry.getName());


              mainFrm.getCodeContext().setSourceEntry(newEntry);
            }

            if(newEntry.equals(upperTvp.getSourceEntry())) upperTvp.setSourceEntry(newEntry);
            if(newEntry.equals(bottomTvp.getSourceEntry())) bottomTvp.setSourceEntry(newEntry);
          }
        }
        else{
          SourceEntry.syncWithBuffer(pfe.getPath(), pfe.getName());
        }
        pfe.syncLastModifiedTimeWithRealFile();
      }
    }
  }
*/
}

