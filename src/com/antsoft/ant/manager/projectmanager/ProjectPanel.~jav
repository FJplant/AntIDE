/*
 * $Header: /AntIDE/source/ant/manager/projectmanager/ProjectPanel.java 37    99-05-23 2:52a Remember $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 37 $
 * $History: ProjectPanel.java $
 * 
 * *****************  Version 37  *****************
 * User: Remember     Date: 99-05-23   Time: 2:52a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 * 
 * *****************  Version 36  *****************
 * User: Remember     Date: 99-05-22   Time: 11:23p
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 * 
 * *****************  Version 35  *****************
 * User: Remember     Date: 99-05-20   Time: 4:58p
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 * 
 * *****************  Version 34  *****************
 * User: Remember     Date: 99-05-20   Time: 11:30a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 * 
 * *****************  Version 33  *****************
 * User: Remember     Date: 99-05-17   Time: 7:10a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 *
 * *****************  Version 31  *****************
 * User: Multipia     Date: 99-05-17   Time: 12:20a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 * 
 * *****************  Version 30  *****************
 * User: Remember     Date: 99-05-17   Time: 12:07a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 *
 * *****************  Version 29  *****************
 * User: Remember     Date: 99-05-16   Time: 5:25a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 *
 * *****************  Version 27  *****************
 * User: Remember     Date: 99-05-15   Time: 5:35a
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 *
 * *****************  Version 25  *****************
 * User: Remember     Date: 99-05-13   Time: 6:59p
 * Updated in $/AntIDE/source/ant/manager/projectmanager
 *
 * *****************  Version 1  *****************
 * User: Insane       Date: 98-09-12   Time: 5:14p
 * Created in $/Ant/src/ant
 * Main class.
 * 실행시 이 클래스로 실행한다.
 *
 */
package com.antsoft.ant.manager.projectmanager;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.tree.*;
import javax.swing.event.*;

import com.antsoft.ant.pool.sourcepool.*;
import com.antsoft.ant.property.*;
import com.antsoft.ant.property.defaultproperty.*;
import com.antsoft.ant.property.projectproperty.*;
import com.antsoft.ant.designer.classdesigner.*;
import com.antsoft.ant.util.EventHandlerListDlg;
import com.antsoft.ant.util.BorderList;
import com.antsoft.ant.main.MainFrame;
import com.antsoft.ant.designer.codeeditor.TextViewPanel;
import com.antsoft.ant.codecontext.CodeContext;

/**
 *  class ProjectPanel
 *
 *  @author Jinwoo Baek
 *  @author kim sang kyun
 */
public class ProjectPanel extends JPanel implements ActionListener {
  ProjectExplorer pe = null;
  Project project = null;
  BorderLayout borderLayout1 = new BorderLayout();
  JTree tree = new JTree();
  ProjectFileEntry current = null;
  DefaultMutableTreeNode currentNode = null;
  DefaultMutableTreeNode lastSelectedFolder = null;

  // for popup menu
  JPopupMenu prjPopup = new JPopupMenu();
  JPopupMenu folderPopup = new JPopupMenu();

  JPopupMenu filePopupNoRun = new JPopupMenu();
  JPopupMenu filePopupWithRun = new JPopupMenu();

  JMenuItem prjAddFile = new JMenuItem("Add File...");
	JMenuItem prjAddFolder = new JMenuItem("Add Folder...");
  JMenuItem prjBuild = new JMenuItem("Build Project");
  JMenuItem prjProperty = new JMenuItem("Properties...");

	JMenuItem folderAddFile = new JMenuItem("Add File...");
	JMenuItem folderAddFolder = new JMenuItem("Add Folder...");
	JMenuItem folderRemove = new JMenuItem("Remove");
	JMenuItem folderBuild = new JMenuItem("Build Folder");

  JMenuItem fileMakeR = new JMenuItem("Make");
  JMenuItem fileRemoveR = new JMenuItem("Remove");
  JMenuItem fileMake = new JMenuItem("Make");
  JMenuItem fileRemove = new JMenuItem("Remove");

  JMenuItem fileRun = new JMenuItem("Run");


	// Icon for add or remove a file for project
	JButton savePrjBtn = new JButton(new ImageIcon(getClass().getResource("image/saveprj.gif")));
	JButton closePrjBtn = new JButton(new ImageIcon(getClass().getResource("image/closeprj.gif")));
	JButton addFolderBtn = new JButton(new ImageIcon(getClass().getResource("image/addfolder.gif")));
	JButton addFileBtn = new JButton(new ImageIcon(getClass().getResource("image/addfile.gif")));
	JButton removeBtn = new JButton(new ImageIcon(getClass().getResource("image/remove.gif")));
	JButton propertyBtn = new JButton(new ImageIcon(getClass().getResource("image/prjoption.gif")));

	/**
	 *  Root Node
	 */
	protected DefaultMutableTreeNode rootNode;

  /**
   *  TreeCell Renderer
   */
  ProjectTreeCellRenderer renderer = new ProjectTreeCellRenderer();

	/**
	 *  manage tree model
	 */
	protected DefaultTreeModel treeModel;

  /**
   *  현 객체의 레퍼런스를 얻는다.
   */
  public ProjectPanel ProjectPanel() {
    return this;
  }

	/**
	 *  Constructor
	 */
  public ProjectPanel(ProjectExplorer pe, Project prj) {
    this.pe = pe;
    project = prj;
    MouseListener treeMouseEventHandler = new TreeMouseEventHandler();
    setBorder(BorderList.unselLineBorder);

    setPreferredSize(new Dimension(250, 0));
    setMaximumSize(new Dimension(2000, 0));
    setMinimumSize(new Dimension(0, 0));
    setLayout(borderLayout1);

    treeModel = project.getTreeModel();

    // for tree
		tree = new JTree(treeModel);
    tree.putClientProperty("JTree.lineStyle", "Angled");
		tree.setEditable(false);
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		tree.setShowsRootHandles(true);
    tree.addMouseListener(treeMouseEventHandler);

    // 폴더 추가시 Root노드를 참조하기 때문에 현재는 없앨 수 없다.
    tree.setCellRenderer(renderer);
		tree.addTreeWillExpandListener(new ProjectPanelTreeWillExpandHandler());
		rootNode = (DefaultMutableTreeNode)treeModel.getRoot();

    // for popup menu
    prjAddFile.addActionListener(this);
		// 폴더추가
		prjAddFolder.addActionListener(this);
    prjBuild.addActionListener(this);
    prjProperty.addActionListener(this);

    // for popup menu
    folderAddFile.addActionListener(this);
		// 폴더추가
		folderAddFolder.addActionListener(this);
		folderRemove.addActionListener(this);
		folderBuild.addActionListener(this);

    fileMake.addActionListener(this);
    fileRemove.addActionListener(this);

    fileMakeR.addActionListener(this);
    fileRemoveR.addActionListener(this);

    fileRun.addActionListener(this);

    prjPopup.add(prjAddFile);
		prjPopup.add(prjAddFolder);
    prjPopup.add(prjBuild);
    prjPopup.addSeparator();
    prjPopup.add(prjProperty);

		folderPopup.add(folderAddFile);
		folderPopup.add(folderAddFolder);
		folderPopup.add(folderRemove);
    folderPopup.addSeparator();
		folderPopup.add(folderBuild);

    filePopupNoRun.add(fileMake);
    filePopupNoRun.add(fileRemove);

    filePopupWithRun.add(fileMakeR);
    filePopupWithRun.add(fileRemoveR);
    filePopupWithRun.add(fileRun);


		savePrjBtn.setToolTipText("Save Project");
		savePrjBtn.setPreferredSize(new Dimension(20, 20));
		savePrjBtn.addActionListener(this);

		closePrjBtn.setToolTipText("Close Project");
		closePrjBtn.setPreferredSize(new Dimension(20, 20));
		closePrjBtn.addActionListener(this);

		addFolderBtn.setToolTipText("Add Folder");
		addFolderBtn.setPreferredSize(new Dimension(20, 20));
		addFolderBtn.addActionListener(this);

		addFileBtn.setToolTipText("Add File");
		addFileBtn.setPreferredSize(new Dimension(20, 20));
		addFileBtn.addActionListener(this);

		removeBtn.setToolTipText("Remove");
		removeBtn.setPreferredSize(new Dimension(20, 20));
		removeBtn.addActionListener(this);

		propertyBtn.setToolTipText("Project Properties...");
		propertyBtn.setPreferredSize(new Dimension(20, 20));
    propertyBtn.addActionListener(this);

		JPanel btnPl1 = new JPanel();
		btnPl1.setLayout(new FlowLayout(FlowLayout.RIGHT));
		btnPl1.add(addFolderBtn);
		btnPl1.add(addFileBtn);
		btnPl1.add(removeBtn);
		btnPl1.add(propertyBtn);

		JPanel btnPl2 = new JPanel();
		btnPl2.setLayout(new FlowLayout(FlowLayout.LEFT));
		btnPl2.add(savePrjBtn);
		btnPl2.add(closePrjBtn);


		addFolderBtn.setEnabled(false);
		addFileBtn.setEnabled(false);
		removeBtn.setEnabled(false);
		propertyBtn.setEnabled(true);

		JPanel btnPl = new JPanel();
    if(!pe.isFilesTab()){
  		btnPl.setLayout(new GridLayout(1, 2));
	  	btnPl.add(btnPl2);
		  btnPl.add(btnPl1);
    }
    else{
      JPanel btnPforDefaultPE = new JPanel();
      btnPforDefaultPE.setLayout(new FlowLayout(FlowLayout.LEFT));
      btnPforDefaultPE.add(addFileBtn);
      btnPforDefaultPE.add(removeBtn);

      btnPl.setLayout(new BorderLayout());
      btnPl.add(btnPforDefaultPE, BorderLayout.WEST);
      addFileBtn.setEnabled(true);
      addFileBtn.setIcon(new ImageIcon(getClass().getResource("image/openfile.gif")));
      removeBtn.setEnabled(true);
    }

		JScrollPane scrollPane = new JScrollPane(tree);
		setLayout(new BorderLayout());
		add(btnPl, BorderLayout.NORTH);
		add(scrollPane, BorderLayout.CENTER);
	}

  /**
   * add file button이나 메뉴가 선택되었을때
   */
  private void addFileToProjectSelected(){

    TreePath tp = tree.getSelectionPath();
    if(tp == null && !pe.isFilesTab()) return;

    String srcRoot = project.getPathModel().getSourceRoot();
    if(srcRoot == null || pe.isFilesTab()) {
      pe.addToProject(null, true);
      return;
    }

    StringBuffer dir = new StringBuffer();
    dir.append(srcRoot);
    if (tp != null) {
      Object obj[] = tree.getSelectionPath().getPath();
      for (int i = 1; i < obj.length; i++) {
        if (obj[i] instanceof ProjectPanelTreeNode) {
          ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)obj[i];
          if (pptn.isFolder()) dir.append(File.separator + pptn.toString());
          else break;
        }
      }
      pe.addToProject(dir.toString(), true);
    }
  }


  /**
   * add folder button이나 메뉴가 선택되었을때
   */
  private void addFolderSelected(){
    ProjectAddFolderDlg dlg = new ProjectAddFolderDlg(pe.getMainFrame(), "Add Folder...", true);
    dlg.setVisible(true);
    if (dlg.isOK()) {
      String value = dlg.getValue();
      if(value != null) addObject(value);
    }
  }

  private void removeBtnSelected(){
    TreePath tp = tree.getSelectionPath();
    if (tp == null) return;

    DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)tp.getLastPathComponent();
    if (currentNode != null) removeCurrentNode(currentNode);
  }

  private void folderAddFileSelected(){
    StringBuffer dir = new StringBuffer();
    dir.append(project.getPathModel().getSourceRoot());
    Object obj[] = tree.getSelectionPath().getPath();
    for (int i = 1; i < obj.length; i++) {
      if (obj[i] instanceof ProjectPanelTreeNode) {
        ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)obj[i];
        if (pptn.isFolder()) dir.append(File.separator + pptn.toString());
        else break;
      }
    }
    pe.addToProject(dir.toString(), true);
  }

  private void folderBuildSelected(){
    TreePath tp = tree.getSelectionPath();
    if(tp == null) return;

    Vector fileList = new Vector();
    DefaultMutableTreeNode dmtn = (DefaultMutableTreeNode)tp.getLastPathComponent();
    Enumeration nodes = dmtn.depthFirstEnumeration();
    while (nodes.hasMoreElements()) {
      ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)nodes.nextElement();
      if (pptn.isFile()) fileList.addElement(pptn.getUserObject());
    }
    pe.compileFiles(fileList);
  }

  private void fileRemoveSelected(){
    TreePath tp = tree.getSelectionPath();
    if (current == null || tp == null) return;

    DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)tp.getLastPathComponent();
    pe.removeFromProject((ProjectFileEntry)currentNode.getUserObject());
    if (currentNode != null) removeCurrentNode(currentNode);
  }

  private void fileRunSelected(){
    SourceEntry se = pe.getLastOpenedSource();
    String fileName, pathName;

    // 1999.05.20 itree 추가
    // run source가 .html file인지 .java file인지 check!
    if (se != null) {
      fileName = se.getName();
      pathName = se.getPath();

      if (fileName.endsWith(".html") || fileName.endsWith(".htm"))
         pe.runApplet(pathName, fileName);
      else {
         MainFrame.codeContext.notifyRun();
      }
    }
  }

  public void actionPerformed(ActionEvent evt) {
  	if (evt.getSource() == addFolderBtn) {addFolderSelected(); }
    else if (evt.getSource() == addFileBtn){ addFileToProjectSelected(); }
    else if (evt.getSource() == removeBtn){ removeBtnSelected(); }
    else if (evt.getSource() == propertyBtn) { pe.showProperty();  }
    else if (evt.getSource() == savePrjBtn) { pe.getMainFrame().saveProject(); }
    else if (evt.getSource() == closePrjBtn) { pe.getMainFrame().closeProject(); }
    else if (evt.getSource() == prjAddFile) { addFileToProjectSelected(); }
    else if (evt.getSource() == prjAddFolder) { addFolderSelected(); }
    else if (evt.getSource() == prjBuild) { pe.buildProject(); }
    else if (evt.getSource() == prjProperty) { pe.showProperty(); }
    else if (evt.getSource() == folderAddFolder) { addFolderSelected(); }
    else if (evt.getSource() == folderRemove){ removeBtnSelected(); }
    else if (evt.getSource() == folderAddFile){ folderAddFileSelected(); }
    else if (evt.getSource() == folderBuild){ folderBuildSelected(); }
    else if (evt.getSource() == fileMake || evt.getSource() == fileMakeR){ if (current != null) pe.compileFile(current.getPath(), current.getName()); }
    else if (evt.getSource() == fileRemove || evt.getSource() == fileRemoveR) { fileRemoveSelected(); }
    else if (evt.getSource() == fileRun) { fileRunSelected(); }
  }

	/**
	 *  Remove all nodes except the root node.
	 */
	public void clear() {
		rootNode.removeAllChildren();
		treeModel.reload();
	}


  /**
   * folder node를 지운다
   */
  private void removeFolderNode(DefaultMutableTreeNode folderNode){
    int childNum = treeModel.getChildCount(folderNode);

    //먼저 자식들을 모두 삭제한다
    for(int i=childNum-1; i>=0; i--){
      DefaultMutableTreeNode child = (DefaultMutableTreeNode)treeModel.getChild(folderNode, i);

      if(child.getUserObject() instanceof ProjectFileEntry) {
         removeFileNode(child);
       }
      else  removeFolderNode(child);
    }

    //마지막으로 자신을 삭제한다
    MutableTreeNode parent = (MutableTreeNode)folderNode.getParent();
    if(parent != null) treeModel.removeNodeFromParent(folderNode);
  }

  /**
   * file node를 지운다
   */
  private void removeFileNode(DefaultMutableTreeNode fileNode){

    //먼저 project로 부터 삭제한다
    pe.removeFromProject((ProjectFileEntry)fileNode.getUserObject());

    //tree에서 삭제한다
    DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode)fileNode.getParent();
    if(parentNode != null) {
      DefaultMutableTreeNode childAfter = (DefaultMutableTreeNode)parentNode.getChildAfter(fileNode);
      treeModel.removeNodeFromParent(fileNode);

      if(childAfter!=null && childAfter.getUserObject() instanceof ProjectFileEntry){
         ProjectFileEntry obj = (ProjectFileEntry)childAfter.getUserObject();
         pe.openDocument(obj.getPath(), obj.getName(), true);
      }
      else{ pe.closeDocument(); }
      addFolderBtn.setEnabled(false);
      addFileBtn.setEnabled(true);
      removeBtn.setEnabled(true);
    }
  }

	/**
	 *  Remove the currently selected node.
	 */
	public void removeCurrentNode(DefaultMutableTreeNode currentNode) {
		if (currentNode == null) return;

    //file node
    if(currentNode.getUserObject() instanceof ProjectFileEntry) {
      removeFileNode(currentNode);

    }
    else removeFolderNode(currentNode);
  }

	/**
	 *  Remove the specified file node.
	 *
	 *  @param pfe entry to remove
	 */
	public void removeNode(ProjectFileEntry pfe) {

		for (int i = 0; i < tree.getRowCount(); i++) {
   		TreePath tp = tree.getPathForRow(i);
			DefaultMutableTreeNode tn = (DefaultMutableTreeNode)tp.getLastPathComponent();
			Object obj = tn.getUserObject();
			if (obj instanceof ProjectFileEntry) {
				ProjectFileEntry pf = (ProjectFileEntry)obj;
				if (pf.equals(pfe)) {
					DefaultMutableTreeNode parent = (DefaultMutableTreeNode)tn.getParent();
					if (parent != null) {
						DefaultMutableTreeNode next = (DefaultMutableTreeNode)parent.getChildAfter(tn);
						if (next != null) tree.setSelectionRow(i);
						else if (i > 0) tree.setSelectionRow(i - 1);

						treeModel.removeNodeFromParent(tn);
					}
					break;
				}
			}
		}
	}

	/**
	 *  Add child to the currently selected node.
	 *
	 *  @param child object to add to tree
	 *  @return DefalutMutableTreeNode added tree node
	 */
	public DefaultMutableTreeNode addObject(Object child) {
		DefaultMutableTreeNode parentNode = null;
		TreePath parentPath = tree.getSelectionPath();

		if (parentPath == null) {
			parentNode = rootNode;
		} else {
			parentNode = (DefaultMutableTreeNode)(parentPath.getLastPathComponent());
			if (parentNode instanceof ProjectPanelTreeNode) {
				ProjectPanelTreeNode node = (ProjectPanelTreeNode)parentNode;
				if (node.isFile()) parentNode = (DefaultMutableTreeNode)node.getParent();
			}
		}

		return addObject(parentNode, child, true);
	}

	/**
	 *  Add child to the parent node
	 *
	 *  @param parent parent node
	 *  @param child object to add to tree
	 *  @return DefalutMutableTreeNode added tree node
	 */
	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child) {
		return addObject(parent, child, true);
	}

	/**
	 *  Add child to the parent node with visibility
	 *
	 *  @param parent parent node
	 *  @param child object to add to tree
	 *  @param shouldBeVisible whether let node visible or not
	 *  @return DefaultMutableTreeNode added tree node
	 */
	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
				Object child, boolean shouldBeVisible) {
		ProjectPanelTreeNode childNode = new ProjectPanelTreeNode(child);

		if (parent == null) {
			parent = rootNode;
		}

		// 노드의 제 위치(Sorting이 되게)를 찾아서 넣어야한다. -_-;;
		int index = 0;
		for (int i = 0; i < parent.getChildCount(); i++) {
			ProjectPanelTreeNode iter = (ProjectPanelTreeNode)parent.getChildAt(i);
			// 폴더 먼저 배열하고 파일을 배열하자
			if (childNode.isFolder()) {
				if (iter.isFolder()) {
        	int comp = childNode.toString().toUpperCase().compareTo(iter.toString().toUpperCase());
					if (comp > 0) index++;
          else if ((comp == 0) && (childNode.toString().compareTo(iter.toString()) > 0)) index++;
					else break;
				} else break;
			}
			// 파일을 배열하자
			else {
				if (iter.isFile()) {
        	int comp = childNode.toString().toUpperCase().compareTo(iter.toString().toUpperCase());
					if (comp > 0) index++;
          else if ((comp == 0) && (childNode.toString().compareTo(iter.toString()) > 0)) index++;
					else break;
				} else index++;
			}
		}
		treeModel.insertNodeInto(childNode, parent, index);

		// Make sure the user can see the lovely new node.
		if (shouldBeVisible) {
			tree.expandPath(new TreePath(parent.getPath()));
			tree.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

  /**
   * default project일겨우에 사용된다
   */
  public void addFileToDefaultProject(ProjectFileEntry pfe) {
    if (pfe != null) {
      addObject((DefaultMutableTreeNode)treeModel.getRoot(), pfe);
		}
  }

	/**
	 *  프로젝트에 파일을 추가하면서 프로젝트 트리에도 추가한다.
	 */
  public void addFileToProject(ProjectFileEntry pfe) {
		// 원래 있던 파일들과 비교를 해야한다.
    if (pfe == null) return;

    TreePath treepath = null;
    TreePath tpFound = null;
    boolean found = false;
    Object[] objs = pathToTreePath(pfe.getPath());
    if (objs != null) treepath = new TreePath(objs);
    for (int i = 0; i < tree.getRowCount(); i++) {
      TreePath tp = tree.getPathForRow(i);
      if ((treepath != null) && tp.equals(treepath)) tpFound = tp;

      DefaultMutableTreeNode tn = (DefaultMutableTreeNode)tp.getLastPathComponent();
      Object obj = tn.getUserObject();
      if (obj instanceof ProjectFileEntry) {
        ProjectFileEntry pf = (ProjectFileEntry)obj;
        if (pf.equals(pfe)) {
          found = true;
          break;
        }
      }
    }

    if (!found) {
      if (tpFound != null) addObject((DefaultMutableTreeNode)tpFound.getLastPathComponent(), pfe);
      else {
        DefaultMutableTreeNode parent = addPath(treepath);
        if (parent != null)	addObject(parent, pfe);
        else addObject(pfe);
      }
    }
  }

  /**
   *  트리에 path를 추가한다.
   */
  public DefaultMutableTreeNode addPath(TreePath tp) {
  	if (tp == null) return null;

    DefaultMutableTreeNode parent = rootNode;
    for (int i = 1; i < tp.getPathCount(); i++) {
      parent = addObject(parent, ((ProjectPanelTreeNode)tp.getPathComponent(i)).getUserObject());
    }
    return parent;
  }

  /**
   *  프로젝트 트리에 폴더를 추가
   */
  public DefaultMutableTreeNode addFolder(String folderName) {
  	// 폴더가 있는지 보고
    if (folderName == null) return null;
    boolean found = false;

    if (currentNode != null) {
      if (currentNode != rootNode) {
        ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)currentNode;
        if (pptn.isFolder()) {
          int i = 0;
          ProjectPanelTreeNode nd = null;
          for (i = 0; i < pptn.getChildCount(); i++) {
            nd = (ProjectPanelTreeNode)pptn.getChildAt(i);
            if (nd.isFolder() && nd.toString().equals(folderName)) {
              found = true;
              break;
            }
          }
          if (!found) lastSelectedFolder = addObject(folderName);
          else lastSelectedFolder = (DefaultMutableTreeNode)nd;
        }
      }
      else {
        int i = 0;
        ProjectPanelTreeNode nd = null;
        for (i = 0; i < currentNode.getChildCount(); i++) {
          nd = (ProjectPanelTreeNode)currentNode.getChildAt(i);
          if (nd.isFolder() && nd.toString().equals(folderName)) {
            found = true;
            break;
          }
        }
        if (!found) lastSelectedFolder = addObject(folderName);
        else lastSelectedFolder = (DefaultMutableTreeNode)nd;
      }
    }

    return lastSelectedFolder;
  }

  /**
   *  가장 최근에 추가한 폴더에 추가하기
   */
  public void addFileToProjectWithLastAddedFolder(ProjectFileEntry pfe) {
  	// 원래 있던 파일들과 비교를 해야한다.
    if (pfe == null) return;
    boolean found = false;
    for (int i = 0; i < tree.getRowCount(); i++) {
      TreePath tp = tree.getPathForRow(i);
      DefaultMutableTreeNode tn = (DefaultMutableTreeNode)tp.getLastPathComponent();
      Object obj = tn.getUserObject();
      if (obj instanceof ProjectFileEntry) {
        ProjectFileEntry pf = (ProjectFileEntry)obj;
        if (pf.equals(pfe)) {
          found = true;
          break;
        }
      }
    }

    if (!found && (lastSelectedFolder != null)) addObject(lastSelectedFolder, pfe, true);
  }

	/**
	 *  프로젝트 트리에서 해당 노드를 선택되도록 한다.
	 */
  public void setSelectionFile(String pathName, String fileName) {
		ProjectFileEntry pfe = new ProjectFileEntry(pathName, fileName);
		for (int i = 0; i < tree.getRowCount(); i++) {
   		TreePath tp = tree.getPathForRow(i);
			DefaultMutableTreeNode tn = (DefaultMutableTreeNode)tp.getLastPathComponent();
			Object obj = tn.getUserObject();
			if (obj instanceof ProjectFileEntry) {
				ProjectFileEntry pf = (ProjectFileEntry)obj;
				if (pf.equals(pfe)) {
					tree.setSelectionPath(tp);
					break;
				}
			}
		}
	}

  /**
   *  파일 경로로 되어있는 문자열을 분석하여 트리 경로로 구성한다.
   */
  public Object[] pathToTreePath(String path) {

  	String sourcePath = project.getPathModel().getSourceRoot();
    Vector items = new Vector(5, 2);
    if ( sourcePath != null && path.startsWith(sourcePath)) {
    	int idx = sourcePath.length();
      if (!sourcePath.endsWith(File.separator)) {
        idx++;
        if(sourcePath.equals(path)){
          Object [] objs = new Object[1];
          objs[0] = rootNode;
          return objs;
        }
      }    

    	String str = path.substring(idx);
      StringTokenizer token = new StringTokenizer(str);
      while(token.hasMoreTokens()) {
      	String item = token.nextToken(File.separator);
        if ((item != null) && !item.trim().equals("")) {
        	ProjectPanelTreeNode pptn = new ProjectPanelTreeNode(item);
          if (pptn != null) items.addElement(pptn);
          else break;
        }
        else break;
      }
      if (items.size() > 0) {
      	Object[] objs = new Object[items.size() + 1];
        objs[0] = rootNode;
        for (int i = 1; i < items.size() + 1; i++)
        	objs[i] = (ProjectPanelTreeNode)items.elementAt(i - 1);
        return objs;
      }
      else return null;
    }
    else return null;
  }

  public void setSelLineBorder(){
    setBorder(BorderList.selLineBorder);
  }

  public void clearBorder(){
    setBorder(BorderList.unselLineBorder);
  }

	/**
	 *  Inner class TreeSelectionListener from mouse
	 *
	 *  트리에서 노드를 선택했을 때 처리한다.
   *  TreeSelection event로 처리하면 심각한 Side Effect가 발생하기 때문에
	 *  마우스 이벤트로 처리한다
   *
	 *  @author Jinwoo Baek
   *  @author kim sang kyun
	 */
  class TreeMouseEventHandler extends MouseAdapter {
    TreePath prevPath = null;
    String prevTvp = null;
    public void mousePressed(MouseEvent evt){

      pe.setFocusedComponent(ProjectExplorer.PROJECT_PANEL);

      TreePath path = tree.getSelectionPath();
      String currTvp = TextViewPanel.focusedPosition;
      if (path == null) return;

      if((prevPath != null) && (prevTvp != null) &&
          prevPath.equals(path) && prevTvp.equals(currTvp) ) return;

      prevPath = path;
      prevTvp = currTvp;

      DefaultMutableTreeNode dmtn = (DefaultMutableTreeNode)path.getLastPathComponent();
      if (dmtn instanceof ProjectPanelTreeNode) {
        ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)dmtn;
        if (pptn.isFile()) { // 파일일 경우
          current = (ProjectFileEntry)pptn.getUserObject();

          removeBtn.setEnabled(true);
          if(!pe.isFilesTab()){
            addFolderBtn.setEnabled(false);
            addFileBtn.setEnabled(true);
          }
          currentNode = dmtn;
          if (current != null) pe.openDocument(current.getPath(), current.getName(), true);
        }
        else { // 폴더일 경우
          removeBtn.setEnabled(true);
          if(!pe.isFilesTab()){
            addFolderBtn.setEnabled(true);
            addFileBtn.setEnabled(true);
          }
          currentNode = dmtn;
          pe.closeDocument();
          current = null;
        }
      } // root node
      else {
        removeBtn.setEnabled(false);
        if(!pe.isFilesTab()){
          addFolderBtn.setEnabled(true);
          addFileBtn.setEnabled(true);
        }
        currentNode = dmtn;
      }
    }

    public void mouseReleased(MouseEvent evt) {

      if (evt.getModifiers() == InputEvent.BUTTON3_MASK) {
        tree.setSelectionPath(tree.getPathForLocation(evt.getX(), evt.getY()));

        TreePath path = tree.getSelectionPath();
        if (path != null) {
          DefaultMutableTreeNode dmtn = (DefaultMutableTreeNode)path.getLastPathComponent();
          if (dmtn instanceof ProjectPanelTreeNode) {
            ProjectPanelTreeNode pptn = (ProjectPanelTreeNode)dmtn;
            // 폴더일때
            if (pptn.isFolder()) {
              Point p = tree.getLocationOnScreen();
              if(!pe.isFilesTab()) folderPopup.show(tree, evt.getX(), evt.getY());
            }
            // 파일일때
            else if (pptn.isFile()) {
              Point p = tree.getLocationOnScreen();
              if(!pe.isFilesTab()) {
                System.out.println("HasMain1 : " + CodeContext.hasMain);

                if(CodeContext.hasMain == true || dmtn.getUserObject().toString().toLowerCase().endsWith(".html") ||
                   dmtn.getUserObject().toString().toLowerCase().endsWith(".htm") ) {
                   filePopupWithRun.show(tree, evt.getX(), evt.getY());
                }
                else{
                   filePopupNoRun.show(tree, evt.getX(), evt.getY());
                }
              }
            }
          }
          // Root Node일때
          else {
            Point p = tree.getLocationOnScreen();
            if(!pe.isFilesTab()) prjPopup.show(tree, evt.getX(), evt.getY());
          }
        }
      }
    }
  }

	/**
	 *  Inner class ProjectPanelTreeWillExpandHandler
	 *
	 *  프로젝트 트리에서 expand를 처리하기 위함.
	 *
	 *  @author Jinwoo Baek
	 */
	class ProjectPanelTreeWillExpandHandler implements TreeWillExpandListener {
		public void treeWillExpand(TreeExpansionEvent event) {
		}

		public void treeWillCollapse(TreeExpansionEvent event) {
			TreePath tp = event.getPath();
			if (tp.isDescendant(tree.getSelectionPath())) tree.setSelectionPath(tp);
		}
	}
}

