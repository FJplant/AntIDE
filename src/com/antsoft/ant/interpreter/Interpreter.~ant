package com.antsoft.ant.interpreter;

import java.io.*;
import com.antsoft.ant.manager.projectmanager.*;
import com.antsoft.ant.property.*;
import com.antsoft.ant.property.projectproperty.*;
import com.antsoft.ant.util.Constants;
/**
 *  class Interpreter
 *
 *  @author Jinwoo Baek
 */
public class Interpreter implements Runnable {
	private InterpreterOptionModel model = null;
  private Project project = null;
  private OutputFrame outputPanel = null;
  private Process p = null;
  private String[] cmd = null;
  static boolean lock = true;

	public Interpreter(Project prj) {
  	this.project = prj;
    if (project != null) model = project.getInterpreterModel();
  }

  public void interpret(String className, OutputFrame pl) {
  	this.outputPanel = pl;
  	int index = 0;
		JdkInfo info = project.getPathModel().getCurrentJdkInfo();
    String classPath = project.getPathModel().getClassPath() + project.getPathModel().getOutputRoot();
		InterpreterOptionModel model = project.getInterpreterModel();
		String[] cmd2 = new String[14];
    cmd2[index++] = info.getJavawEXEPath();
    if ((classPath != null) && !classPath.trim().equals("")) {
    	cmd2[index++] = "-classpath";
      cmd2[index++] = classPath;
    }

    if (model.getVerboseMode()) cmd2[index++] = model.getVerboseOption();
    if (model.getDebugMode()) cmd2[index++] = model.getDebugOption();
    if (model.getNoAsyncGCMode()) cmd2[index++] = model.getNoAsyncGCOption();
    if (model.getVerboseGCMode()) cmd2[index++] = model.getVerboseGCOption();
    if (model.getNoClassGCMode()) cmd2[index++] = model.getNoClassGCOption();
    if (model.getMaxNatStackMode()) cmd2[index++] = model.getMaxNatStackOption();
    if (model.getMaxJavaStackMode()) cmd2[index++] = model.getMaxJavaStackOption();
    if (model.getInitHeapMode()) cmd2[index++] = model.getInitHeapOption();
    if (model.getMaxHeapMode()) cmd2[index++] = model.getMaxHeapOption();
    if (model.getCommonMode()) cmd2[index++] = model.getCommonOption();
    if (model.getMainClassMode() && !model.getMainClassName().trim().equals(""))
    	cmd2[index++] = model.getMainClassName();
    else cmd2[index++] = className;

    StringBuffer commandStr = new StringBuffer();
  	cmd = new String[index];
    for (int i = 0; i < cmd.length; i++) {
    	cmd[i] = cmd2[i];
      commandStr.append(cmd[i] + " ");
//      System.out.println("cmd [" + i + "] : " + cmd[i]);
    }

    outputPanel.appendText(commandStr + Constants.lineSeparator);

    Thread t = new Thread(this);
    Thread t2 = new Thread(this);
    t.setPriority(Thread.MIN_PRIORITY);
    t2.setPriority(Thread.MIN_PRIORITY);
		t.start();
    t2.start();
  }

  public void run() {
		try {
    	if (lock) {
      	lock = false;
				Runtime rt = Runtime.getRuntime();
        if (p != null) { p.destroy(); p = null; }
				p  = rt.exec(cmd);
        Thread.yield();
      }
      if (p != null) {
				LineNumberReader in = null;
        LineNumberReader in1 = null;
        LineNumberReader in2 = null;

        if (lock) {
          lock = !lock;
          if ((in1 == null) || (in2 == null)) {
          	in1 = new LineNumberReader(new InputStreamReader(p.getInputStream()));
            in2 = new LineNumberReader(new InputStreamReader(p.getErrorStream()));
          }
					outputPanel.clear();
					in = in1;
        }
        else {
          if ((in1 == null) || (in2 == null)) {
          	in1 = new LineNumberReader(new InputStreamReader(p.getInputStream()));
            in2 = new LineNumberReader(new InputStreamReader(p.getErrorStream()));
          }
        	in = in2;
        }
				String outStr = null;
				while((in != null) && (outStr = in.readLine()) != null) {
					outputPanel.appendText(outStr + Constants.lineSeparator);
          Thread.yield();
				}
				in.close();
				if (p != null) p.destroy();
        lock = true;
      }
    } catch (IOException e) {
			System.out.println("Exception in IP : " + e);
    }
  }

  public void kill() {
  	if (p != null) p.destroy();
  }
}