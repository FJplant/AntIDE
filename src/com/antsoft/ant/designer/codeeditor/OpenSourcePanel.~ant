/*
 * $Header: /AntIDE/source/ant/designer/codeeditor/OpenSourcePanel.java 16    99-06-02 2:29p Remember $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 16 $
 * $History: OpenSourcePanel.java $
 * 
 * *****************  Version 16  *****************
 * User: Remember     Date: 99-06-02   Time: 2:29p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 15  *****************
 * User: Itree        Date: 99-06-01   Time: 6:12p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 14  *****************
 * User: Itree        Date: 99-05-31   Time: 5:42p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 12  *****************
 * User: Remember     Date: 99-05-29   Time: 6:28p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 11  *****************
 * User: Itree        Date: 99-05-29   Time: 1:55p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 10  *****************
 * User: Itree        Date: 99-05-28   Time: 5:29p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 *
 * *****************  Version 7  *****************
 * User: Remember     Date: 99-05-28   Time: 1:27p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 6  *****************
 * User: Remember     Date: 99-05-28   Time: 12:06p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 5  *****************
 * User: Itree        Date: 99-05-28   Time: 8:29a
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 * 
 * *****************  Version 4  *****************
 * User: Remember     Date: 99-05-27   Time: 5:49p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 *
 * *****************  Version 2  *****************
 * User: Remember     Date: 99-05-26   Time: 6:11p
 * Updated in $/AntIDE/source/ant/designer/codeeditor
 */
package com.antsoft.ant.designer.codeeditor;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.Hashtable;
import java.util.Enumeration;

import com.antsoft.ant.manager.projectmanager.ProjectPanelTreeNode;
import com.antsoft.ant.manager.projectmanager.ProjectExplorer;
import com.antsoft.ant.util.BorderList;
import com.antsoft.ant.main.MainFrame;
/**
 * 현재 오픈되어 있는 파일들을 갖는다
 *
 * @author kim sang kyun
 */
public class OpenSourcePanel extends JPanel implements ActionListener{

  private Hashtable sourceNodes = new Hashtable(15);
  private ProjectExplorer pe;
  private Font f;
  private JButton currB, leftB, rightB;
  private Color selC = new Color(0, 0, 31);
  private JPanel listP;
  private JScrollPane pane;
  private Icon leftIcon = new ImageIcon(getClass().getResource("image/left.gif"));
  private Icon rightIcon = new ImageIcon(getClass().getResource("image/right.gif"));
  //itree
  private Icon redIcon = new ImageIcon(getClass().getResource("image/red.gif"));
  private Icon yellowIcon = new ImageIcon(getClass().getResource("image/yellow.gif"));

  private JPopupMenu fileBtnPopup = new JPopupMenu();
  private JMenuItem m_close = new JMenuItem("Close");
  private JMenuItem m_save = new JMenuItem("Save");
  private JMenuItem m_saveAs = new JMenuItem("Save As...");

  private JMenuItem m_make = new JMenuItem("Make");

  private MouseListener buttonHandlerForEditor;

  private MainFrame mainfrm;

  public OpenSourcePanel(ProjectExplorer pe, MainFrame frm){
    setLayout(new BorderLayout());
    this.pe = pe;
    mainfrm = frm;
    listP = new JPanel();
    listP.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));

    JButton b = new JButton();
    f = new Font(b.getFont().getName(), Font.PLAIN, 11);
    pane = new JScrollPane(listP, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,
                                              ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER  );

    pane.setBorder(BorderList.loweredBorder);

    leftB = new JButton(leftIcon);
    leftB.addActionListener(this);
    leftB.setMargin(new Insets(0, 0, 0, 0));
//    leftB.setBorder(BorderList.raisedBorder);

    rightB = new JButton(rightIcon);
    rightB.addActionListener(this);
    rightB.setMargin(new Insets(0, 0, 0, 0));
//    rightB.setBorder(BorderList.raisedBorder);

    add(pane, BorderLayout.CENTER);
    add(leftB, BorderLayout.WEST);
    add(rightB, BorderLayout.EAST);

    // popup Menu 추가
//    fileBtnPopup.setFont(f);
    m_close.setFont(f);
    m_make.setFont(f);
    m_save.setFont(f);
    m_saveAs.setFont(f);

    fileBtnPopup.add(m_make);
    fileBtnPopup.addSeparator();
    fileBtnPopup.add(m_save);
    fileBtnPopup.add(m_saveAs);
    fileBtnPopup.add(m_close);

    buttonHandlerForEditor = new ButtonMouseEventHandler();

    m_close.addActionListener(this);
    m_make.addActionListener(this);
    m_save.addActionListener(this);
    m_saveAs.addActionListener(this);
    
  }

  private void setSelectedB(JButton b, boolean isSelected){
    if(isSelected){
//      b.setForeground(Color.yellow);
      b.setForeground(Color.black);
      b.setBorder(BorderList.loweredBorder);
//      b.setBackground(selC);
    }
    else{
      b.setForeground(Color.black);
      b.setBorder(BorderList.raisedBorder);
//      b.setBackground(Color.lightGray);
    }
  }

  private void scrollRight(){
    int value = pane.getHorizontalScrollBar().getValue();
    pane.getHorizontalScrollBar().setValue(value+100);
  }

  private void scrollLeft(){
    int value = pane.getHorizontalScrollBar().getValue();
    pane.getHorizontalScrollBar().setValue(value-100);
  }
  public void notifyModifiedSource(boolean modified) {

    if(currB == null)
      return;

    if(modified) {
    //  if(currB.getIcon() != redIcon)
        currB.setIcon(redIcon);
    }
    else {
    //  if(currB.getIcon() != yellowIcon)
        currB.setIcon(yellowIcon);
    }
  }

  public void notifyNodeRemoved(ProjectPanelTreeNode node){
    String name = node.getUseObject().toString();

    sourceNodes.remove(name);
    Component [] comps = listP.getComponents();
    for(int i=0; i<comps.length; i++){

      Component c = comps[i];
      if(c instanceof JButton){
        JButton b = (JButton)c;
        if(b.getText().equals(name)) {
          listP.remove(b);
          listP.doLayout();
          pane.repaint();
        }
      }
    }
  }

  public void notifyFileOpen(ProjectPanelTreeNode node){

    String name = node.getUseObject().toString();

    if(sourceNodes.get(name) != null){
      int count = listP.getComponentCount();
      for(int i=0; i<count; i++){
        Component c = listP.getComponent(i);
        if(c instanceof JButton){
          JButton b = (JButton)c;

          if(b.getText().equals(name)){
            if(currB != null) setSelectedB(currB, false);

            currB = b;
            setSelectedB(currB, true);
            break;
          }
        }
      }
    }
    else{

      if(currB != null) setSelectedB(currB, false);

      sourceNodes.put(name, node);
      currB = new JButton(name, yellowIcon);
      currB.setFont(f);
      currB.setMargin(new Insets(0, 0, 0, 0));
      currB.setPreferredSize(new Dimension(115 , 18));
      currB.setToolTipText(" " + name + " ");
      currB.addActionListener(this);
      currB.addMouseListener(buttonHandlerForEditor);

      setSelectedB(currB, true);
      Component [] existComps = listP.getComponents();
      if(existComps == null) listP.add(currB);
      else{
        listP.removeAll();
        listP.add(currB);

        for(int i=0; i<existComps.length; i++){
          listP.add(existComps[i]);
        }
      }
      listP.doLayout();
    }
  }

  public void actionPerformed(ActionEvent e){
    if(e.getSource() == leftB) {
      scrollLeft();
    }
    else if(e.getSource() == rightB) {
      scrollRight();
    }
    else if(e.getSource() == m_close) {
      mainfrm.closeOpenFile();
    }
    else if(e.getSource() == m_make) {
      mainfrm.make();
    }
    else if(e.getSource() == m_save) {
      mainfrm.saveCurrent();
    }
    else if(e.getSource() == m_saveAs) {
      mainfrm.saveAsCurrent();
    }

    else{
      if(currB != null) setSelectedB(currB, false);

      JButton b = (JButton)e.getSource();
      currB = b;
      setSelectedB(currB, true);

      ProjectPanelTreeNode node = (ProjectPanelTreeNode)sourceNodes.get(b.getText());
      btnSelect(node);
    }
  }
  public void btnSelect(ProjectPanelTreeNode node) {
    if(node != null) {
        pe.openSourceHappened(this, node);
    }
  }

  public void fileClosed(ProjectPanelTreeNode node){
    String name = node.getUseObject().toString();
    sourceNodes.remove(name);

    int count = listP.getComponentCount();
    for(int i=0; i<count; i++){
      Component c = listP.getComponent(i);
      if(c instanceof JButton){
         JButton b = (JButton)c;

        if(b.getText().equals(name)){
          listP.remove(i);
          listP.repaint();
          break;
        }
      }
    }
  }

  public ProjectPanelTreeNode getNextSource() {
    Enumeration enum = sourceNodes.elements();
    if (!enum.hasMoreElements()) {
      System.out.println("no next file");
      return null;
    }

    return (ProjectPanelTreeNode)enum.nextElement();
  }

  /** FileButton MouseEventHandelr Inner Class */
  class ButtonMouseEventHandler extends MouseAdapter{
    public void mouseReleased(MouseEvent evt) {
      if (evt.isPopupTrigger()) {
        fileBtnPopup.show( currB, evt.getX(), evt.getY());
      }
    }

    public void mousePressed(MouseEvent evt) {
      if(currB != null) setSelectedB(currB, false);

      JButton b = (JButton)evt.getSource();
      currB = b;
      setSelectedB(currB, true);

      ProjectPanelTreeNode node = (ProjectPanelTreeNode)sourceNodes.get(b.getText()+".java");
      if(node != null) {
        pe.openSourceHappened(this, node);
      }
    }
  }
}
