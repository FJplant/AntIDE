/*
 * $Header: /AntIDE/source/ant/designer/codeeditor/CodePopup.java 19    99-05-24 9:50p Remember $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 19 $
 */
package com.antsoft.ant.designer.codeeditor;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;
import javax.swing.text.*;

import com.antsoft.ant.pool.sourcepool.SourceEntry;
import com.antsoft.ant.pool.sourcepool.JavaDocument;
import com.antsoft.ant.codecontext.CodeContext;
import com.antsoft.ant.main.MainFrame;

import com.antsoft.ant.util.MyCaret;

/**
 *  class CodePopup
 *
 *  @author Kim sang kyun
 */
class CodePopup extends JWindow implements KeyListener,DocumentListener{
  private JList list;
  private static JEditorPane editor;
  private TextViewPanel tvp = null;
  private SourceEntry src_entry;
  private DefaultListModel trimmedM = null;
  private int recentMatchIndex = -1;
  private JavaDocument doc;
  private MyCellRenderer r;
  private JScrollPane scroll;
  private ComponentHandler ch;
  private WindowHandler wh;
  private MouseHandler mh;
  private Frame owner;
  private JScrollPane scroller;

  /**
   * constructor
   */
  public CodePopup(Frame owner, TextViewPanel tvp, JScrollPane scroller){
    super(owner);
    this.owner = owner;
    this.tvp = tvp;
    this.scroller = scroller;

    ch = new ComponentHandler();
    wh = new WindowHandler();
    mh = new MouseHandler();

    list = new JList();
    r = new MyCellRenderer();
    list.setCellRenderer(r);

    list.addKeyListener(new KeyAdapter(){
      public void keyPressed(KeyEvent evt) {
        int code=evt.getKeyCode();
        if(code == KeyEvent.VK_ENTER) enterAction();
        else if(code == KeyEvent.VK_ESCAPE) exitAction();
      }});

    list.addMouseListener(new MouseAdapter(){
      public void mouseClicked(MouseEvent e){
        r.makeSelect();
        recentMatchIndex = list.getSelectedIndex();

        if(e.getClickCount() == 2) enterAction();
      }});

    scroller.getVerticalScrollBar().addMouseListener(new MouseAdapter(){
      public void mousePressed(MouseEvent e){
        if(CodePopup.this.isVisible()) exitAction();
      }
    });

    scroller.getHorizontalScrollBar().addMouseListener(new MouseAdapter(){
      public void mousePressed(MouseEvent e){
        if(CodePopup.this.isVisible()) exitAction();
      }
    });

    scroll = new JScrollPane(list);
    getContentPane().add(scroll);
    pack();
  }

  private boolean inScreen(Point p){
    int width = Toolkit.getDefaultToolkit().getScreenSize().width;
    int height = Toolkit.getDefaultToolkit().getScreenSize().height;


    System.out.println("InScreen : " + p);
    if(p.x >= 0 && p.x < width && p.y >=0 && p.y <= height &&
        p.x > MainFrame.mainFrame.getLocation().x && p.y > MainFrame.mainFrame.getLocation().y) return true;

    else return false;
  }

  private static int dotOffset=0;

  public Point getPosition(){
    Point p = null;
    Rectangle r = MyCaret.getCurrPosition();
    if(r == null) return null;

    p = new Point(r.x + r.width, r.y + r.height);
    SwingUtilities.convertPointToScreen(p, editor);

    //screen에 맞게 위치를 바꾼다
    int scrH = Toolkit.getDefaultToolkit().getScreenSize().height;
    if(p.y + getSize().height > scrH) p.y = p.y - getSize().height - r.height;

    return p;
  }

  public void hideWindow(){
    if(isVisible()) exitAction();
  }

  /**
   * 화면에 나타낸다
   */

  Point leftTopP = new Point(0, 0);
  public void showWindow(JEditorPane editor){
    this.editor = editor;
    editor.addKeyListener(this);
    editor.addMouseListener(mh);
    editor.getDocument().addDocumentListener(this);
    tvp.getViewPort().addComponentListener(ch);
    owner.addComponentListener(ch);
    owner.addWindowListener(wh);


    Point p = getPosition();
    setLocation(p);
    scroll.getViewport().setViewPosition(leftTopP);
		setVisible(true);
    dotOffset = CodeContext.getDotOffset();
  }

  /**
   * data를 setting
   */
  public void setIntelliData(Vector data, JavaDocument doc){
    this.doc = doc;
    list.setListData(data);
    trimmedM = getTrimmedModel(list.getModel());

    int maxWidth = 0;
    if(data != null)
    for(int i=0; i<trimmedM.size(); i++){
      String str = (String)trimmedM.elementAt(i);
      maxWidth = (str.length() > maxWidth) ? str.length() : maxWidth;
    }

    int charWidth = Toolkit.getDefaultToolkit().getFontMetrics(r.getFont()).charWidth('m')+1;
    setSize(9*charWidth + maxWidth*charWidth , getSize().height);
  }

  private int lineEndOffset = 0;
  public void insertUpdate(DocumentEvent event) {

    int offset = event.getOffset();
    Element elem=doc.getParagraphElement(offset);
    lineEndOffset = elem.getEndOffset();
   	int length=offset-dotOffset;
    if(length <= 0)
    {
      editor.removeKeyListener(CodePopup.this);
      editor.getDocument().removeDocumentListener(CodePopup.this);
      CodePopup.this.setVisible(false);
      return;
    }

    String matchStr=null;
    try{
       matchStr = doc.getText(dotOffset+1,length);
       matchList(matchStr);
     }catch(BadLocationException e){}
  }

  public void removeUpdate(DocumentEvent event) {
    int offset = event.getOffset();
    Element elem=doc.getParagraphElement(offset);
    lineEndOffset = elem.getEndOffset();
   	int length=offset-dotOffset-1;

    if(length < 0)
    {
      editor.removeKeyListener(CodePopup.this);
      editor.getDocument().removeDocumentListener(CodePopup.this);
      CodePopup.this.setVisible(false);
      return;
    }

    String matchStr=null;
    try{
       matchStr = doc.getText(dotOffset+1,length);
       matchList(matchStr);
     }catch(BadLocationException e){}
  }
  public void changedUpdate(DocumentEvent event) {}

  public void keyPressed(KeyEvent evt) {
    int code=evt.getKeyCode();
    String keyText = evt.getKeyText(code);

    if(keyText.equals("."))
    {
      exitAction();
      return;
    }

    switch(code){

      //여는 괄호
      case KeyEvent.VK_9:
          if(evt.isShiftDown()){
            exitAction();
            break;
          }

      case KeyEvent.VK_UP :
          r.makeSelect();
          if(list.getSelectedIndex() <= 0) return;
          list.setSelectedValue(list.getModel().getElementAt(list.getSelectedIndex()-1), true);
          --recentMatchIndex;
          break;

      case KeyEvent.VK_DOWN :
          r.makeSelect();
          if(list.getSelectedIndex() == list.getModel().getSize()-1) return;
          list.setSelectedValue(list.getModel().getElementAt(list.getSelectedIndex()+1), true);
          ++recentMatchIndex;
          break;

      case KeyEvent.VK_LEFT :
          if((editor.getCaretPosition() - CodeContext.getDotOffset()) <= 1 ) exitAction();
          break;

      case KeyEvent.VK_RIGHT :
          if(isVisible()) evt.consume();
          if((lineEndOffset-editor.getCaretPosition())<=1) exitAction();
          break;

      case KeyEvent.VK_PAGE_UP :
          evt.consume();
          int count = list.getVisibleRowCount();
          int diff = list.getSelectedIndex() - count;
          int selIndex = (diff < 0 ) ? 0 : diff;
          list.setSelectedValue(list.getModel().getElementAt(selIndex), true);
          recentMatchIndex = selIndex;
          break;

      case KeyEvent.VK_PAGE_DOWN :
          evt.consume();
          int count2 = list.getVisibleRowCount();
          int sum = list.getSelectedIndex() + count2;
          int selIndex2 = (sum > list.getModel().getSize()-1) ? list.getModel().getSize()-1 : sum;
          list.setSelectedValue(list.getModel().getElementAt(selIndex2), true);
          recentMatchIndex = selIndex2;
          break;

      case KeyEvent.VK_ESCAPE :
          editor.removeKeyListener(CodePopup.this);
          editor.getDocument().removeDocumentListener(CodePopup.this);
          CodePopup.this.setVisible(false);
          break;

      case KeyEvent.VK_ENTER :
          enterAction();
          break;

      default : break;
    }
  }

  public void keyTyped(KeyEvent e){}
  public void keyReleased(KeyEvent e){}

  ///////////////////// Private methods /////////////////////////////

  /**
   * 현재의 match 문자열을 가지고 match되는게 있는지 알아본다
   *
   * @param matchStr current match string
   */
  private void matchList(String matchStr){

    if(trimmedM == null) return;

    if(matchStr.length() == 0){
      recentMatchIndex = -1;
      r.makeUnselect();
      scroll.repaint();
      return;
    }

    int i=0;
    for(; i<trimmedM.getSize(); i++)
    {
      String eleOfList = (String)trimmedM.elementAt(i);
      if(eleOfList.toLowerCase().startsWith(matchStr.toLowerCase()))
      {
        list.setSelectedValue(list.getModel().getElementAt(i), true);
        break;
      }
    }

    r.makeSelect();

    if(i == trimmedM.getSize()){
       recentMatchIndex = -1;
       r.makeUnselect();
    }
    else recentMatchIndex = i;

    scroll.repaint();
  }

  /**
   * 원래의 data에서 앞 "Method" or "Member"라는 문자열을 뺀 data를 반환한다
   */
  private DefaultListModel getTrimmedModel(ListModel original){
    DefaultListModel trimmedM = null;
    if(original != null){
      trimmedM = new DefaultListModel();

      for(int i=0; i<original.getSize(); i++){
        String element = (String)original.getElementAt(i);
        String trimmedStr = element.substring(element.indexOf(" ")).trim();
        trimmedM.addElement(trimmedStr);
      }
    }

    return trimmedM;
  }

  /**
   * Cancel action. 각종 listener들을 해제한다
   */
  private void exitAction(){

    editor.removeKeyListener(CodePopup.this);
    editor.getDocument().removeDocumentListener(CodePopup.this);
    tvp.getViewPort().removeComponentListener(ch);
    owner.removeComponentListener(ch);
    owner.removeWindowListener(wh);
    setVisible(false);
  }

  /**
   * OK action
   */
  private void enterAction(){
    editor.getDocument().removeDocumentListener(CodePopup.this);
    editor.removeKeyListener(CodePopup.this);
    tvp.getViewPort().removeComponentListener(ch);
    owner.removeComponentListener(ch);
    owner.removeWindowListener(wh);
    setVisible(false);

    if(recentMatchIndex == -1) return;

    int offset = editor.getCaretPosition();
    Element elem=doc.getParagraphElement(offset);
 	  int length=elem.getEndOffset()-dotOffset;

    String str=null;
    try{

       str = doc.getText(dotOffset+1,length);
       StringTokenizer st=new StringTokenizer(str,". \t\n\r");
       String toRemove = null;
       if (st.hasMoreTokens()) toRemove = st.nextToken();
       if(toRemove != null) doc.remove(dotOffset+1, toRemove.length());
       String frontTrim = (String)trimmedM.get(list.getSelectedIndex());
       StringTokenizer st2 = new StringTokenizer(frontTrim, ":");
       String toInsert = st2.nextToken().trim();
       doc.insertString(dotOffset+1, toInsert);

    }
    catch(BadLocationException e){}
    catch(Exception e2){}
  }

  class MyCellRenderer extends JPanel implements ListCellRenderer {
     public Color darkBlue = new Color(0, 0, 31);
     public Color sfc = Color.yellow;
     public Color sbc = darkBlue;
     public Color dfc = Color.black;
     private Color dbc = Color.white;

     private JLabel left, center, right;
     private StringTokenizer st;
     Font f = new Font("DialogInput", Font.PLAIN, 12);

     public Font getFont(){
       return f;
     }  

     public MyCellRenderer() {
       setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
       left = new JLabel();
       right = new JLabel();
       center = new JLabel();

       left.setOpaque(true);
       center.setOpaque(true);
       right.setOpaque(true);

       setOpaque(true);
       this.setBackground(Color.white);

       left.setFont(new Font("DialogInput", Font.PLAIN, 12));
       center.setFont(new Font("DialogInput", Font.BOLD, 12));
       right.setFont(new Font("DialogInput", Font.PLAIN, 12));

       add(left); add(center); add(right);
     }

     public void makeUnselect(){
       sfc = Color.black;
       sbc = Color.white;
       dfc = Color.black;
       dbc = Color.white;
     }

     public void makeSelect(){
       sfc = Color.yellow;
       sbc = darkBlue;
       dfc = Color.black;
       dbc = Color.white;
     }

     public Component getListCellRendererComponent(
         JList list,
         Object value,
         int index,
         boolean isSelected,
         boolean cellHasFocus)
     {
         st = new StringTokenizer((String)value, " :", false);
         left.setText(" "+st.nextToken());
         center.setText("  "+st.nextToken());
         if (st.hasMoreTokens()) right.setText(" : "+st.nextToken());

         left.setBackground(isSelected ? sbc : dbc);
         left.setForeground(isSelected ? sfc : dfc);
         right.setBackground(isSelected ? sbc : dbc);
         right.setForeground(isSelected ? sfc : dfc);
         center.setBackground(isSelected ? sbc : dbc);
         center.setForeground(isSelected ? sfc : dfc);
         this.setBackground(isSelected ? sbc : dbc);
         this.setForeground(isSelected ? sfc : dfc);

         return this;
     }
  }

  boolean offEnter=false;
  public void setOffEnter() {
    offEnter=true;
  }

  /** component event handler */
  class ComponentHandler extends ComponentAdapter{

    public void componentResized(ComponentEvent e){
      if(CodePopup.this.isVisible()) exitAction();
    }
    public void componentMoved(ComponentEvent e){
      if(CodePopup.this.isVisible()) exitAction();
    }
  }

  class WindowHandler extends WindowAdapter{
    public void windowIconified(WindowEvent e){
      if(CodePopup.this.isVisible()) exitAction();
    }
  }

  class MouseHandler extends MouseAdapter{
    public void mousePressed(MouseEvent e){
     if(CodePopup.this.isVisible())  exitAction();
    }
  }
}

