/*
 * $Header: /AntIDE/source/ant/codecontext/CodeContext.java 91    99-06-02 4:51p Kahn $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 91 $
 * Part : Code Context Module
 * Author: Kim, Sung-hoon(kahn@antj.com)
 * Starting at 1999. 1. 20.
 *                   2.  1.
 *                   2.  2.
 *                   2.  3.
 *                   2.  4.
 *                   2.  5.
 *                   2.  6.
 *                   2.  7.
 *                   2.  8.
 *                   2.  9.
 *                   2. 10.
 *                   2. 11.
 *                   3. 10.
 */

package com.antsoft.ant.codecontext;

import com.antsoft.ant.codecontext.codeeditor.*;
import com.antsoft.ant.manager.projectmanager.*;
import com.antsoft.ant.pool.sourcepool.*;
import com.antsoft.ant.pool.librarypool.*;
import com.antsoft.ant.pool.packagepool.*;
import com.antsoft.ant.pool.classpool.*;
import com.antsoft.ant.main.*;
import com.antsoft.ant.util.*;
import com.antsoft.ant.browser.packagebrowser.*;
import com.antsoft.ant.property.JdkInfo;

//import ant.codecontext.parser.*;

import java.io.*;
import java.util.*;
import javax.swing.text.*;
import javax.swing.event.*;

/**
  The module Code Context.

  @author Kim, sung-hoon.
  */
public class CodeContext {
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Class Member Field Declaration..............

	protected Hashtable totaltabSymbol;  // has table of project symbol table.
	protected Hashtable totaltabImport;  // has table of project import table.

  // the symbol table(it has field & method member.)
  protected Hashtable symtab;		// currently used symbol table.
  protected Hashtable symtabs;	// symbol table list of all opened file(in project).

  // the import list is stored this field.
  protected Hashtable imptab;		// currently used import table.
  protected Hashtable imptabs;	// import table list of all opened file(in project).

  protected Hashtable classtableall = new Hashtable();
  protected Hashtable classtable = null;

	protected String currentPrj="Files";

	protected static Daemon daemon=null;

	protected SourcePool sourcePool=null;  // SourcePool reference
	protected ProjectExplorer projectExplorer;  // ProjectExplorer reference

	// for Conversation to the CodeEditor(that is, ProjectExplorer).
	protected static SourceEntry se;
	protected static JavaDocument currentDocument;		// current JavaDocument reference.
	protected DocListener docListener;			// current listener reference.

	// current package name of the currently activated source code.
	protected String nameOfPackage="dummypack";

  protected Hashtable openedProject = new Hashtable();
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Constructor......................

	/**
	  Constructor.
    */
	public CodeContext() {
   	totaltabSymbol=new Hashtable();
   	totaltabImport=new Hashtable();

    symtabs=new Hashtable();
    imptabs=new Hashtable();

		totaltabSymbol.put("Files",symtabs);
		totaltabImport.put("Files",imptabs);

    daemon=new Daemon(this);
    daemon.start();
 	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Project°ü·Ã public method declaration...........

	/**
	 * when opening project, the SymbolTable is read in specified table.
	 */
 	public void openPrj(String prj,String path) {
    openedProject.put(path,projectExplorer.getProject());
		File f=new File(path+".property.symbol");
		if (f.exists()) {
			try {
				FileInputStream istream=new FileInputStream(f);
				ObjectInputStream stream=new ObjectInputStream(istream);

        classtable=(Hashtable)stream.readObject();

				stream.close();
				istream.close();
			} catch (Exception e) {
				System.out.println("read Object "+e.toString());
			}
   		symtabs=new Hashtable();
		}
   	else {
      classtable=new Hashtable();
   	}

		totaltabSymbol.put(prj,symtabs);
		totaltabImport.put(prj,imptabs);
    classtableall.put(prj,classtable);
	}

	/**
	 * when tabbing project, the SymbolTable is read in specified table.
	 */
 public void movePrj(String prj) {
    classtable=(Hashtable)classtableall.get(prj);
    if (classtable==null) {
      classtable = new Hashtable();
      classtableall.put(prj,classtable);
    }

    symtabs=(Hashtable)totaltabSymbol.get(prj);
    imptabs=(Hashtable)totaltabImport.get(prj);
    if (symtabs==null) symtabs=new Hashtable();
    if (imptabs==null) imptabs=new Hashtable();

    containers=new ClassMemberContainerList();
	  Enumeration enum=symtabs.keys();
		while (enum!=null&&enum.hasMoreElements()) {
  	  String key=(String)enum.nextElement();
  		symtab=(Hashtable)symtabs.get(key);
 	  	imptab=(Hashtable)imptabs.get(key);

   		createClassMember();
   	}
  }

  /*
   * when adding files, this method is called, and it parse the files, then makes class table...
   */
  public void addFiles(Vector files) {
    for (int i=0;i<files.size();++i) {
      File f = new File((String)files.elementAt(i));
      DispatchClassInfo dispatch = new DispatchClassInfo(f);
      dispatch.makeClassInfo();
      Hashtable table = dispatch.getTable();
      String packname = dispatch.getPackageName();

      Enumeration e = table.keys();
      while (e!=null&&e.hasMoreElements()) {
        String key = packname+"."+(String)e.nextElement();
        classtable.put(key,(String)files.elementAt(i));
      }
    }
  }

	/**
	 * when closing project, the SymbolTable is saved in specified table.
	 */
	public void closePrj(String prj,String path) {
		if (prj.equals("Files")) {
			System.out.println("Files tab...");
			return;
		}

    classtableall.remove(prj);
	}

  public void exitProgram() {
    Enumeration e = openedProject.keys();
    while (e!=null&&e.hasMoreElements()) {
      String path = (String)e.nextElement();
      Project prj = (Project)openedProject.get(path);
      SymbolSave saver = new SymbolSave(path+".property.symbol",prj);
      saver.run();
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // table maintenance method declaration..............

  /**
   get the symbol table reference.

   @return the symbol table as Hashtable reference.
   */
  public Hashtable getSymTab() {
    return symtab;
  }

  /**
   set the symbol table for Daemon Class.

   @param t modified symbol table as Hashtable.
   */
  public void setSymTab(Hashtable t) {
    symtab=t;

    Enumeration e = symtab.elements();
    while (e!=null&&e.hasMoreElements()) {
      SymbolTableEntry entry = (SymbolTableEntry)e.nextElement();
      if (entry.getSuperClass().lastIndexOf(".")==-1) {
        String sup = entry.getSuperClass();
        Enumeration enum=imptab.keys();
        boolean found = false;

        while (enum!=null&&enum.hasMoreElements()) {  // in jdk.
          String impString=(String)enum.nextElement();
          if (impString.equals(nameOfPackage)) continue;
          String fullClassName=null;
          int pos=impString.lastIndexOf("*");
          if (pos!=-1) fullClassName=impString.substring(0,pos)+sup;
          else {
            int lastDot=impString.lastIndexOf(".");
            if (!sup.equals(impString.substring(lastDot+1,impString.length()))) continue;
            fullClassName=impString;
          }
          if (ClassPool.exist(fullClassName)) {
            entry.setSuperClass(fullClassName);
            found = true;
            break;
          }
          if (classtable.containsKey(nameOfPackage+"."+sup)) {
            entry.setSuperClass(nameOfPackage+"."+sup);
            found = true;
            break;
          }
        }

        if (!found)
          if (ClassPool.exist("java.lang."+sup)) entry.setSuperClass("java.lang."+sup);
      }
    }
  }

  // get table of symbol table.
  public Hashtable getSymTabs() {
    return symtabs;
  }

  /**
   get the import table reference.

   @return the import table as Hashtable reference.
   */
  public Hashtable getImpTab() {
    return imptab;
  }
  // set the import table for Daemon Class.
  public void setImpTab(Hashtable t) {
    imptab=t;
  }

  public Hashtable getClassTable() {
    return classtable;
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // various reference of the object................

	public static final ClassPool classPool = new ClassPool();	// Class Pool reference.
	public static final LibraryPool libraryPool = new LibraryPool();	// Library Pool reference.
	public static final PackagePool packagePool = new PackagePool();	// Package Pool reference.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// for Listener Collection of some event conversation.
	private static Vector sourceBrowserEventListener=new Vector();	// Source Browser Event Listener collection
	private Vector editFunctionEventListener=new Vector();	// Edit Function Event Listener collection

	public static JavaDocument getCurrentDocument() {
		return currentDocument;
	}

  /**
    get the Edit Function Event Listener list.

    @return Vector.
    */
  public Vector getEditFunctionEventListener() {
    return editFunctionEventListener;
  }

  /**
    get the Source Browser Event Listener list.

    @return Vector.
    */
  public static Vector getSourceBrowserEventListener() {
    return sourceBrowserEventListener;
  }

	// class member container list for search class of current project.
	static ClassMemberContainerList containers=new ClassMemberContainerList();

  /**
    getting the Class Member Container List reference.

    @return class member container list.
    */
  public static ClassMemberContainerList getClassMemberContainerList() {
    return containers;
  }

  /**
    getting the name of this package.

    @return the name of package as String.
    */
  public String getNameOfPackage() {
    return nameOfPackage;
  }

	/**
	  setting source Pool.

	  @param the ClassDesinger Ojbect reference.
	  */
	public void setSourcePool(SourcePool o) {
    sourcePool=o;
  }

	/**
	  setting ProjectExplorer reference.

	  @param the ProjectExplorer Ojbect reference.
	  */
	public void setProjectExplorer(ProjectExplorer o) {
    projectExplorer=o;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public void doParsing(File f) {
    TableCreatorFromFile creator = new TableCreatorFromFile(f);
    Hashtable oldsymtab = symtab;
    Hashtable oldimptab = imptab;

    symtab=creator.getSymbolTable();
    imptab=creator.getImportListTable();
    String packname = creator.getPackageName();
    createClassMember();

    Enumeration e = symtab.elements();
    while (e!=null&&e.hasMoreElements()) {
      SymbolTableEntry entry = (SymbolTableEntry)e.nextElement();
      if (entry.getSuperClass().lastIndexOf(".")==-1) {
        String sup = entry.getSuperClass();
        Enumeration enum=imptab.keys();
        boolean found = false;

        while (enum!=null&&enum.hasMoreElements()) {  // in jdk.
          String impString=(String)enum.nextElement();
          if (impString.equals(packname)) continue;
          String fullClassName=null;
          int pos=impString.lastIndexOf("*");
          if (pos!=-1) fullClassName=impString.substring(0,pos)+sup;
          else {
            int lastDot=impString.lastIndexOf(".");
            if (!sup.equals(impString.substring(lastDot+1,impString.length()))) continue;
            fullClassName=impString;
          }
          if (ClassPool.exist(fullClassName)) {
            entry.setSuperClass(fullClassName);
            found = true;
            break;
          }
          if (classtable.containsKey(packname+"."+sup)) {
            entry.setSuperClass(packname+"."+sup);
            found = true;
            break;
          }
        }

        if (!found)
          if (ClassPool.exist("java.lang."+sup)) entry.setSuperClass("java.lang."+sup);
      }
    }

    String name = f.getName();
    String key = f.getPath();
    key=key.substring(0,key.indexOf("\\"+name))+name;
    symtabs.put(key,symtab);
    imptabs.put(key,imptab);

    symtab=oldsymtab;
    imptab=oldimptab;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // setting source and parse the file, and make event for source browser...........

	private void insertTable(String tableKey) {
		// ¸¸¾à ±âÁ¸¿¡ ¾ø´Â °ÍÀÌ¶ó¸é.... »õ·ÎÀÌ »ý¼ºÇÑ´Ù.
    TableCreator tableCreator=new TableCreator(currentDocument);
    symtab=tableCreator.getSymbolTable();
    imptab=tableCreator.getImportListTable();

    if (tableCreator.hasMain()) {
      String pack = tableCreator.getPackageName();
      if (pack.equals("dummypack")) setRunnable(tableCreator.getMainClass());
      else setRunnable(pack+"."+tableCreator.getMainClass());
    }
    else { setRunnable(null); }

		// »õ·Î »ý¼ºÇÑ tableÀ» table list¿¡ putÇÑ´Ù.
		symtabs.put(tableKey,symtab);
		imptabs.put(tableKey,imptab);

		createClassMember();
	}

	/**
	  setting current Source Entry reference.

	  @param the SourceEntry Ojbect reference including current document reference.
	  */
	public void setSourceEntry(SourceEntry sourceEntry) {
		se=sourceEntry;
		Daemon.setTableKey(se.getPath()+se.getName());
		nameOfPackage="dummypack";
		if (docListener!=null) {
			currentDocument.removeDocumentListener(docListener);
			//currentDocument.removeUndoableEitListener(docListener);
		}

		currentDocument=sourceEntry.getDocument();

		docListener=new DocListener();
    currentDocument.addDocumentListener(docListener);
    //currentDocument.addUndoableEditListener(docListener);

		// ±âÁ¸¿¡ Á¸ÀçÇÏ´ø tableÀ» °¡Á®¿Â´Ù.
		String tableKey=se.getPath()+se.getName();
		symtab=(Hashtable)symtabs.get(tableKey);

		if (symtab==null) insertTable(tableKey);
		// ±âÁ¸¿¡ ÀÖÀ¸¸é, import tableµµ °¡Á®¿Â´Ù.
		else {
      imptab=(Hashtable)imptabs.get(tableKey);
    }

		makeSourceBrowserEvent(false);

    Enumeration e = symtab.elements();
    while (e!=null&&e.hasMoreElements()) {
      SymbolTableEntry entry = (SymbolTableEntry)e.nextElement();
      if (entry.getSuperClass().lastIndexOf(".")==-1) {
        String sup = entry.getSuperClass();
        Enumeration enum=imptab.keys();
        boolean found = false;

        while (enum!=null&&enum.hasMoreElements()) {  // in jdk.
          String impString=(String)enum.nextElement();
          if (impString.equals(nameOfPackage)) continue;
          String fullClassName=null;
          int pos=impString.lastIndexOf("*");
          if (pos!=-1) fullClassName=impString.substring(0,pos)+sup;
          else {
            int lastDot=impString.lastIndexOf(".");
            if (!sup.equals(impString.substring(lastDot+1,impString.length()))) continue;
            fullClassName=impString;
          }
          if (ClassPool.exist(fullClassName)) {
            entry.setSuperClass(fullClassName);
            found = true;
            break;
          }
          if (classtable.containsKey(nameOfPackage+"."+sup)) {
            entry.setSuperClass(nameOfPackage+"."+sup);
            found = true;
            break;
          }
        }

        if (!found)
          if (ClassPool.exist("java.lang."+sup)) entry.setSuperClass("java.lang."+sup);
      }
    }
    //getDependency();
  }

	/**
	  setting current SourceEntry reference.

	  @param the SourceEntry Ojbect reference including current document reference.
	  */
	public void setReloadSourceEntry(SourceEntry sourceEntry) {
		se=sourceEntry;
		Daemon.setTableKey(se.getPath()+se.getName());
		nameOfPackage="dummypack";
		if (docListener!=null) {
			currentDocument.removeDocumentListener(docListener);
			//currentDocument.removeUndoableEitListener(docListener);
		}

		currentDocument=sourceEntry.getDocument();

		docListener=new DocListener();
    currentDocument.addDocumentListener(docListener);
    //currentDocument.addUndoableEditListener(docListener);

		String tableKey=se.getPath()+se.getName();

		insertTable(tableKey);
		makeSourceBrowserEvent(false);

    Enumeration e = symtab.elements();
    while (e!=null&&e.hasMoreElements()) {
      SymbolTableEntry entry = (SymbolTableEntry)e.nextElement();
      if (entry.getSuperClass().lastIndexOf(".")==-1) {
        String sup = entry.getSuperClass();
        Enumeration enum=imptab.keys();
        boolean found = false;

        while (enum!=null&&enum.hasMoreElements()) {  // in jdk.
          String impString=(String)enum.nextElement();
          if (impString.equals(nameOfPackage)) continue;
          String fullClassName=null;
          int pos=impString.lastIndexOf("*");
          if (pos!=-1) fullClassName=impString.substring(0,pos)+sup;
          else {
            int lastDot=impString.lastIndexOf(".");
            if (!sup.equals(impString.substring(lastDot+1,impString.length()))) continue;
            fullClassName=impString;
          }
          if (ClassPool.exist(fullClassName)) {
            entry.setSuperClass(fullClassName);
            found = true;
            break;
          }
          if (classtable.containsKey(nameOfPackage+"."+sup)) {
            entry.setSuperClass(nameOfPackage+"."+sup);
            found = true;
            break;
          }
        }

        if (!found)
          if (ClassPool.exist("java.lang."+sup)) entry.setSuperClass("java.lang."+sup);
      }
    }
  }

	private void makeSourceBrowserEvent(boolean flag) {
		// ÇöÀç ¼Ò½ºÀÇ package nameÀ» Ã£´Â´Ù.
		Enumeration e=imptab.keys();
		while (e!=null&&e.hasMoreElements()) {
			String pstring=(String)e.nextElement();
			SymbolTableEntry ptable=(SymbolTableEntry)imptab.get(pstring);
			if (ptable.getMemberSort()==SymbolTableEntry.PACKAGE) {
				nameOfPackage=pstring;
				break;
			}
		}

		// SourceBrowser°¡ Æ®¸®Çü½ÄÀ¸·Î ³»¿ëÀ» º¸ÀÏ¼ö ÀÖµµ·Ï event¸¦ ¸¸µç´Ù.
    SourceBrowserEvent evt=new SourceBrowserEvent();
		// Symbol tableÀ» iterateÇØ¼­ event·Î ¸¸µé¾î ¿Â´Ù.
		SymbolTableIterator iter=new SymbolTableIterator(symtab);
		// depth°¡ memberÀÇ depthÀÎ °Í±îÁö °¡Á®¿Â´Ù.
		Vector v=iter.iterateKey(SymbolTableIterator.MEMBER);
		evt.setEvents(v);

		// import tableÀ» iterateÇØ¼­ event·Î ¸¸µé¾î ¿Â´Ù.
		iter=new SymbolTableIterator(imptab);

		// import list¿¡¼­´Â ¸ðµÎ topÀÇ depth¸¸À» °¡Áø´Ù.
		v=iter.iterateKey();
		evt.addEvents(v);		// other import lists.
		evt.alignment();  // alignment event as specified order.

		// °ü·ÃµÈ method¸¦ invoke½ÃÄÑÁØ´Ù.
 		for (int i=0;i<sourceBrowserEventListener.size();++i) {
      SourceBrowserEventListener l=(SourceBrowserEventListener)sourceBrowserEventListener.elementAt(i);
      if (flag) l.clearEvent();
    	if (evt!=null) l.insertEvent(evt);
		}

    Daemon.setLatestEvent(evt);
	}

	/**
	  modify this symbol table and import list table when the user commits the save file.
	  */
	public void modifyTableWhenSaveFile(boolean flag) {
		nameOfPackage="dummypack";
		String tableKey=se.getPath()+se.getName();

		Hashtable hashtable=(Hashtable)symtabs.get(tableKey);
		if (hashtable!=null) {
			symtabs.remove(tableKey);
			imptabs.remove(tableKey);
		}

		insertTable(tableKey);

		if (flag) makeSourceBrowserEvent(true);
	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // add listener of this object.

	/**
	  registering the Source Browser Event Listener Object.

	  @param l Source Browser Event Listener Object.
	  */
	public void addSourceBrowserEventListener(SourceBrowserEventListener l) {
		sourceBrowserEventListener.addElement(l);
	}

	/**
	  registering the Edit Function Event Listener Object.

	  @param l Edit Function Event Listener Object.
	  */
	public void addEditFunctionEventListener(EditFunctionEventListener l) {
		editFunctionEventListener.addElement(l);
	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Document Listener............

  /**
    The inner class DocListener implements the Document interface,
    and when the DocumentEvent occurs, corresponding action is made.
    */
  class DocListener implements DocumentListener/*,UndoableEditListener*/ {
	  public void insertUpdate(DocumentEvent evt) {
			if (thread!=null) thread.setKeyPressed(true);

      try {
        int offset=evt.getOffset();        // ÇöÀç »ðÀÔµÇ´Â °÷ÀÇ offsetÀ» ±¸ÇÑ´Ù.

	      // offsetÀÌ ¼ÓÇÑ leaf elementÀÇ ÂüÁ¶¸¦ ±¸ÇÑ´Ù.(currentDocument´Â
    	  // PlainDocument class¸¦ extendsÇßÀ¸¹Ç·Î ÀÌ element´Â leaf elementÀÌ´Ù.
			  Element elem=currentDocument.getParagraphElement(offset);

        // ÀÌ element ³»¿ëµéÀÇ ½ÃÀÛ°ú ³¡À» ÀüÃ¼ Document¿¡ »ó´ëÀûÀÎ °ªÀ¸·Î ±¸ÇÑ´Ù.
        int startOffset=elem.getStartOffset();
   	    int endOffset=elem.getEndOffset();
       	int length=endOffset-startOffset;

        // ÇöÀç º¯°æµÇ´Â (Ãß°¡µÇ´Â) °÷ÀÇ ÇÑ ¶óÀÎÀÇ ³»¿ëÀ» °¡Á®¿Â´Ù.
        String str=currentDocument.getText(startOffset,length);

        int localOffset=offset-startOffset;

        // ¿©±â¼­ catch() ¾Õ±îÁö°¡ ProjectExplorer¿ÍÀÇ ¿¬µ¿À» À§ÇÑ event¸¦ »ý¼ºÇÏ´Â °÷ÀÌ´Ù.
        // ¾ÕÀ¸·Î ¼öÁ¤À» ÇØ¾ß ÇÑ´Ù.
        char c=str.charAt(localOffset);

       	// Symbol Table Maintenance.
       	SymbolTableIterator stIterator=new SymbolTableIterator(symtab);
       	stIterator.modifyOffsetInTable(offset,evt.getLength());

				SymbolTableIterator stiter=new SymbolTableIterator(symtab);
				int curDepth=stiter.getDepth(offset);

        // For IntelliSense (named by Delphi)
        if (c=='.') {
         	if (curDepth<2) return;
         	if (!Main.property.isIntelliOn()) return;
					// intellisense¿¡ ´ëÇÑ actionÀ» ÃëÇÑ´Ù.
          dotOffset=offset;
					invokeThread(str.substring(0,localOffset),offset,1);
				}
        // For Parameterizing (named by Kim, Sung-Hoon)
        else if (c=='(') {
          openOffset=offset;
         	if (curDepth<2) return;
         	if (!Main.property.isIntelliOn()) return;
         	// parameterizing¿¡ ´ëÇÑ actionÀ» ÃëÇÑ´Ù.
					invokeThread(str.substring(0,localOffset),offset,2);
				}

         // ±×¿Ü SourceBrowserÀÇ TreeÇüÅÂÀÇ ±×¸²À» À§ÇØ
        else {
         	// line parsingÀ» ÀÌ¿ëÇÏ¿© ÇöÀç ÀÔ·ÂÁßÀÎ lineÀ» parsingÇÑ´Ù.
         	//if (c==' '||c=='\t'||c=='\n') return;
					Daemon.setTable(symtabs,imptabs);
					Daemon.setPackageName(nameOfPackage);
					Daemon.insertUpdateFlag=true;
					Daemon.setDepth(curDepth);
          daemon.interrupt();
        }
      } catch (BadLocationException e) {
        System.out.println("exception.... in the insertUpdate().");
      }
		}

		public void changedUpdate(DocumentEvent evt) {
		}

		public void removeUpdate(DocumentEvent evt) {
      try {
      	int offset=evt.getOffset();        // ÇöÀç »ðÀÔµÇ´Â °÷ÀÇ offsetÀ» ±¸ÇÑ´Ù.

       	// offsetÀÌ ¼ÓÇÑ leaf elementÀÇ ÂüÁ¶¸¦ ±¸ÇÑ´Ù.(currentDocument´Â
       	// PlainDocument class¸¦ extendsÇßÀ¸¹Ç·Î ÀÌ element´Â leaf elementÀÌ´Ù.
				Element elem=currentDocument.getParagraphElement(offset);

        // ÀÌ element ³»¿ëµéÀÇ ½ÃÀÛ°ú ³¡À» ÀüÃ¼ Document¿¡ »ó´ëÀûÀÎ °ªÀ¸·Î ±¸ÇÑ´Ù.
        int startOffset=elem.getStartOffset();
        int endOffset=elem.getEndOffset();
        int length=endOffset-startOffset;

        // ÇöÀç º¯°æµÇ´Â (Ãß°¡µÇ´Â) °÷ÀÇ ÇÑ ¶óÀÎÀÇ ³»¿ëÀ» °¡Á®¿Â´Ù.
        String str=currentDocument.getText(startOffset,length);

        // Symbol Table Maintenance.
        SymbolTableIterator stIterator=new SymbolTableIterator(symtab);
        stIterator.modifyOffsetInTable(offset,-evt.getLength());

				SymbolTableIterator stiter=new SymbolTableIterator(symtab);

				Daemon.setTable(symtabs,imptabs);
				Daemon.setPackageName(nameOfPackage);
				Daemon.insertUpdateFlag=true;
				Daemon.setDepth(stiter.getDepth(offset));
        daemon.interrupt();
      } catch (BadLocationException e) {
        System.out.println("exception.... in the removeUpdate().");
      }
		}

		/*
		public void undoableEditHappened(UndoableEditEvent evt) {
		}
		*/
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // creating class member information

	// class member container list creating method.
	void createClassMember() {
		if (symtabs.size()==0&&imptabs.size()==0) return;

		String currentPackage="dummypack";
		Enumeration e=imptab.keys();
		while (e!=null&&e.hasMoreElements()) {
			String key=(String)e.nextElement();

			SymbolTableEntry tab=(SymbolTableEntry)imptab.get(key);
			if (tab.getMemberSort()==SymbolTableEntry.PACKAGE) {
				// ÇöÀçÀÇ package nameÀ» ±¸ÇÑ´Ù.
				currentPackage=key;
				break;
			}
		}

		// ÃÖ»óÀ§ symbol tableÀÇ key¸¦ ÀÐ´Â´Ù.
		Vector classes=new Vector();
		Enumeration en=symtab.keys();
		while (en!=null&&en.hasMoreElements()) {
			String key=(String)en.nextElement();
			classes.addElement(key);
		}

		// ClassMemberContainer¿Í ClassMember °´Ã¼¸¦ ¼±¾ðÇÏ°í¼­...
		ClassMemberContainer memberContainer;
		ClassMember member;

		// °¢ classº°·Î memberµéÀ» searchÇÏ¿© class member container¿¡ ÀÔ·ÂÇÑ´Ù.
		for (int i=0;i<classes.size();++i) {
			memberContainer=new ClassMemberContainer();
			SymbolTableEntry tab=(SymbolTableEntry)symtab.get((String)classes.elementAt(i));

			// ÇÏÀ§ tableÀÌ ÀÖ´Ù¸é, Áï member¿¡ ´ëÇÑ tableÀÌ ÀÖ´Ù¸é.
			if (tab.table!=null) {
				SymbolTableIterator iter=new SymbolTableIterator(tab.table);
				Vector content=iter.iterateKey(SymbolTableIterator.TOP);

				// ¸ðµç Member¸¦ iterateÇÏ¸é¼­ ClassMember¸¦ ¸¸µé°í,
				// »õ·ÎÀÌ ¸¸µç °´Ã¼¸¦ ClassMemberContainer¿¡ ´ã´Â´Ù.
				for (int j=0;j<content.size();++j) {
					// ClassMemberµéÀÇ key string.

					String key=((EventContent)content.elementAt(j)).getContent();

					// SymbolTable¿¡¼­ Ã£¾Æ¼­
                    Hashtable htab=tab.table;
					SymbolTableEntry t=(SymbolTableEntry)htab.get(key);

					// Field, inner class or interface, methodµé¸¸À» Ãë±ÞÇÑ´Ù.
					switch (t.getMemberSort()) {
						case SymbolTableEntry.FIELD:
							// ClassMember°´Ã¼¸¦ ¸¸µé°í °ªÀ» assignÇÏ°í
							member=new ClassMember();
							member.setName(key);
							member.setType(t.getType());
							member.setAccessType(t.getAccessType());
							member.setMemberType(ClassMember.FIELD);

							// ClassMemberContainer¿¡ ´ã´Â´Ù.
							memberContainer.addContainer(member);
							break;

						case SymbolTableEntry.CLASS:
						case SymbolTableEntry.INTERFACE:
							// ClassMember°´Ã¼¸¦ ¸¸µé°í °ªÀ» assignÇÏ°í
							member=new ClassMember();
							member.setName(key);
							member.setType(t.getType());
							member.setAccessType(t.getAccessType());
							member.setMemberType(ClassMember.INNERCLASS);

							// ClassMemberContainer¿¡ ´ã´Â´Ù.
							memberContainer.addContainer(member);
							break;

						case SymbolTableEntry.METHOD:
							// ClassMember°´Ã¼¸¦ ¸¸µé°í °ªÀ» assignÇÏ°í
							member=new ClassMember();

							// methodÀÇ °æ¿ì´Â parameter¸¦ Àß¶ó¼­ ½á¾ßÇÏ¹Ç·Î tokenizingÀ» ÇÑ´Ù.
							StringTokenizer tokenizer=new StringTokenizer(key,"(,)",false);

							// ÃÖÃÊ tokenÀº method name.
							if (tokenizer.hasMoreTokens()) member.setName(tokenizer.nextToken());
							while (tokenizer.hasMoreTokens()) {
								// µÎ¹øÂ°ºÎÅÍ parameter typeµéÀÌ´Ù.
								member.addParameterType(tokenizer.nextToken());
							}
              Vector temp = t.getParameters();
              if (temp!=null)
                for (int k=0;k<temp.size();++k) {
                  member.addParameter((String)temp.elementAt(k));
                }
							member.setType(t.getType());
							member.setAccessType(t.getAccessType());
							member.setMemberType(ClassMember.METHOD);

							// ClassMemberContainer¿¡ ´ã´Â´Ù.
							memberContainer.addContainer(member);
							break;
					}
				}
			}

			// ÃÖÁ¾ÀûÀ¸·Î ÆÐÅ°Áö ÀÌ¸§°ú classÀÌ¸§À» ÇÕÄ£ stringÀ¸·Î key¸¦ ¸¸µé¾î
			String keyOfContainer=currentPackage+"."+classes.elementAt(i);

			// ClassMemberContainerList¿¡ putÇÑ´Ù.
			containers.putClassMemberList(keyOfContainer,memberContainer);
		}
	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // invoke thread for code insight...

	CodeInsight thread=null;

	private void invokeThread(String str,int offset,int what) {
		thread=new CodeInsight(str,offset,this,what);
		Thread intel=new Thread(thread);
    intel.setPriority(Thread.MAX_PRIORITY);
		intel.start();

		Runtime rt=Runtime.getRuntime();
		rt.gc();
	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // additional function for shortcut and menu action.

	/**
	 * if F1 key is pressed on the class name,
	 * the context sensitive helper is activated, and web browser is running.
	 *
	 * @param offset the offset position.
	 */
	public void activateContextSensitiveHelp(int offset) {
		try {
			Element element=currentDocument.getParagraphElement(offset);

			// ÀÌ element ³»¿ëµéÀÇ ½ÃÀÛ°ú ³¡À» ÀüÃ¼ Document¿¡ »ó´ëÀûÀÎ °ªÀ¸·Î ±¸ÇÑ´Ù.
			int startOffset=element.getStartOffset();
			int endOffset=element.getEndOffset();

			int length=endOffset-startOffset;
			int curchar=offset-startOffset;

			// ÇöÀç º¯°æµÇ´Â (Ãß°¡µÇ´Â) °÷ÀÇ ÇÑ ¶óÀÎÀÇ ³»¿ëÀ» °¡Á®¿Â´Ù.
			String str=currentDocument.getText(startOffset,length);

			LineTokenizer lineTokenizer=new LineTokenizer(str);

			while (lineTokenizer.getCurrentPosition()<curchar
						&&lineTokenizer.getCurrentPosition()<str.length())
                  lineTokenizer.nextToken();

			String thing=lineTokenizer.getTokenString();
      if (thing==null) return;

			SymbolTableIterator iterator=new SymbolTableIterator(symtab);
			String thingType=iterator.search(thing,offset);
      if (thingType==null) thingType=thing;

			CodeInsight thr=null;
			if (thingType!=null) thr=new CodeInsight(thingType,offset,this,3);
			else thr=new CodeInsight(thing,offset,this,3);
			Thread helper=new Thread(thr);
			helper.start();

			Runtime rt=Runtime.getRuntime();
			long wasFree=rt.freeMemory();
			long isFree;
			do {
				rt.gc();
				isFree=rt.freeMemory();
			} while (isFree<wasFree);
		} catch (BadLocationException e) {
			System.out.println(e.toString());
		}
	}

	/**
	  When Selection is occurred in Source Browser panel, moves the position for the caret
      to move.

	  @param str the member(field, method, import list, constructor...) to be selected.
	  */
	public void selectSourceBrowser(String cls,String str) {
    Hashtable table=null;
    if (cls!=null) {
      SymbolTableEntry ste=(SymbolTableEntry)symtab.get(cls);
      table=ste.table;
    }
    else table=symtab;

    // symbol table¿¡¼­ ¸ÕÀú Ã£¾Æº»´Ù.
    SymbolTableIterator iter=new SymbolTableIterator(table);
    int offset=iter.search(str);
    if (offset!=-1) {
     	// project explorerÀÇ caretÀ§Ä¡¸¦ ¼öÁ¤ÇÏ¿© ¾Ë·ÁÁØ´Ù.
      if (offset>=currentDocument.getLength()) return;
     	projectExplorer.moveCaret(offset);
     	return;
    }

    // import list search....
		if (str.equals(nameOfPackage)) {
      SymbolTableIterator sIterator=new SymbolTableIterator(imptab);
      offset=sIterator.search(str);
      if (offset!=-1) {
        if (offset>=currentDocument.getLength()) return;
        projectExplorer.moveCaret(offset);
      }
      return;
    }

		if (str.indexOf(".*")!=-1) {

      PackageBrowser pckBrowser = new PackageBrowser(null,"Package Browser",false);
			String packstr=str.substring(0,str.indexOf(".*"));
			if (pckBrowser.showPackage(packstr)) {
        pckBrowser.setVisible(true);
        return;
      }
		}
		else {
			if (extractSource(str)) return;
		}

    SymbolTableIterator sIterator=new SymbolTableIterator(imptab);
    offset=sIterator.search(str);
    if (offset!=-1) {
      if (offset>=currentDocument.getLength()) return;
      projectExplorer.moveCaret(offset);
    }
	}

	private boolean extractSource(String str) {
		String temp=str;
    JdkInfo jdkInfo=ProjectManager.getCurrentProject().getPathModel().getCurrentJdkInfo(); // for null check
    if (jdkInfo==null) return false;
    String srcRootDir=jdkInfo.getSourcePath();

		JavaDocument docu=new JavaDocument();
		if (srcRootDir!=null && !srcRootDir.equals("")) {
			File f=new File(srcRootDir);

			if (f.isDirectory()) {		// source°¡ jar(¾ÐÃà)ÀÌ ¾Æ´Ò¶§....
				// È­ÀÏÀ» Ã£¾Æ¼­ Á÷Á¢ document·Î ¸¸µé¾î openÇÑ´Ù.
				temp=temp.replace('.',File.separatorChar);

				// °¢°¢ÀÌ file·Î ÀúÀåµÇ¾î ÀÖ´Ù.
				String fullFilePath=srcRootDir+File.separator+temp+".java";
				File srcFile=new File(fullFilePath);
				if (!srcFile.exists()) return false;	// check that the file exists actually.

				try {
					Reader in=new BufferedReader(new InputStreamReader(new FileInputStream(srcFile)));
   				char[] buff = new char[4096];
   				int nch;
   				while ((nch = in.read(buff, 0, buff.length)) != -1) {
   					docu.insertString(docu.getLength(), new String(buff, 0, nch), null);
         	}
   			} catch (IOException e) {
          e.printStackTrace();
    			return false;
   			} catch (BadLocationException e) {
          e.printStackTrace();
   				return false;
   			}
				// document¸¦ Áø¿ì¿¡°Ô ³Ñ°Ü¼­ Ã³¸®ÇÏµµ·Ï ÇÑ´Ù.
			}
			else {
				// º¸Åë src.jarÀÇ entryµéÀº src/java/io/File.java·Î ¾ÐÃàµÇ¾îÀÖ´Ù.
				temp=temp.replace('.','/');

				String srcContent=SrcFileExtractor.extract(f,"src/"+temp+".java");
				if (srcContent==null) return false;

				try {
					docu.insertString(docu.getLength(),srcContent,null);
				} catch (BadLocationException be) {
          be.printStackTrace();
   				return false;
				}
			}
		}
		else {
			String result=SrcFileExtractor.extract(temp);
			if (result==null) return false;

      try{
  		  docu.insertString(docu.getLength(),result,null);
      }catch(BadLocationException be) {
        be.printStackTrace();
      	return false;
  	  }
  	}

		MainFrame.showLibSource(docu,str);
    return true;
	}

	/**
	 * if F2 key is pressed on the class name or vairable, the source viewer is activated.
	 *
	 * @param offset the offset position.
	 */
	public void viewJdkSource(int offset) {
    String thingType=getFullClassNameAtCursor(offset);
    if (thingType==null) return;
		extractSource(thingType);
	}

	/**
	 * get full class name at cursor position.
	 *
	 * @param offset the offset position.
	 */
	public String getFullClassNameAtCursor(int offset) {
		try {
			Element element=currentDocument.getParagraphElement(offset);

			// ÀÌ element ³»¿ëµéÀÇ ½ÃÀÛ°ú ³¡À» ÀüÃ¼ Document¿¡ »ó´ëÀûÀÎ °ªÀ¸·Î ±¸ÇÑ´Ù.
			int startOffset=element.getStartOffset();
			int endOffset=element.getEndOffset();

			int length=endOffset-startOffset;
			int curchar=offset-startOffset;

			// ÇöÀç º¯°æµÇ´Â (Ãß°¡µÇ´Â) °÷ÀÇ ÇÑ ¶óÀÎÀÇ ³»¿ëÀ» °¡Á®¿Â´Ù.
			String str=currentDocument.getText(startOffset,length);

			LineTokenizer lineTokenizer=new LineTokenizer(str);

			while (lineTokenizer.getCurrentPosition()<curchar
						&&lineTokenizer.getCurrentPosition()<str.length())
				 lineTokenizer.nextToken();
			String thing=lineTokenizer.getTokenString();
      if (thing==null) return null;

			SymbolTableIterator iterator=new SymbolTableIterator(symtab);
			String classType=iterator.search(thing,offset);
			if (classType==null) classType=thing;

			String thingType=searchSourceFullClassName(classType);
			if (thingType!=null) return thingType;
		} catch (BadLocationException e) {
			System.out.println(e.toString());
		}
		return null;
  }

	// jdkSourceViewer¿¡¼­ ÀÌ¿ëµÇ´Â method. - source ¿¡ ´ëÇÑ full class nameÀ» searchÇÑ´Ù.
	private String searchSourceFullClassName(String type) {
		Enumeration enum=imptab.keys();
		while (enum!=null&&enum.hasMoreElements()) {
			String impString=(String)enum.nextElement();

			if (impString.equals(nameOfPackage)) continue;

      String fullClassName=null;
      int pos=impString.lastIndexOf("*");
      if (pos!=-1) fullClassName=impString.substring(0,pos)+type;
      else {
			  int lastDot=impString.lastIndexOf(".");
				if (!type.equals(impString.substring(lastDot+1,impString.length()))) continue;
        fullClassName=impString;
			}

      if (ClassPool.exist(fullClassName)) return fullClassName;
		}

    if (ClassPool.exist("java.lang."+type)) return "java.lang."+type;

		return null;
	}

	/**
	 * When indentation button is clicked, the indentation is activated,
	 * and the document object is replaced
	 * with the indented document.
	 */
	public void indentDocument() {
		try {
			//String src=currentDocument.getText(0,currentDocument.getLength());
      JavaDocument docu=(JavaDocument)se.getDocument();
      String src=docu.getText(0,docu.getLength());

			JSBeautifier beautifier=new JSBeautifier();

			// Beautifier config setup
			boolean isTab=Main.property.isTab();
			if (isTab) beautifier.setTabIndentation();
			else beautifier.setSpaceIndentation(Main.property.getTabSpaceSize());

			beautifier.setMaxInStatementIndetation(40);
			if (!Main.property.isSwitchIndent()) beautifier.setSwitchIndent(false);
			if (Main.property.isCloseIndent()) beautifier.setBracketIndent(true);

			// Beautifier actioned.
			JavaDocument doc=beautifier.indentation(src);	// second parameter is code style...

			// change the document.
			se.setDocument(doc);
      projectExplorer.notifyChangeDocument();
      setSourceEntry(se);
		} catch (BadLocationException e) {
			System.out.println(e.toString());
		}
	}

	protected void setRunnable(String name) {
		se.setRunnableClassName(name);
	}

	protected void finalize() throws Throwable {
		daemon=null;
	}

 	private static int dotOffset=0;
  private static int openOffset=0;

 	public static int getDotOffset() {
   	return dotOffset;
 	}
  public static int getOpenOffset(){
    return openOffset;
  }

	public void thisCodeInsight(int offset) {
    dotOffset=offset-1;
		invokeThread(null,offset,1);
	}

  public int getInsertPosition(String name) {
    SymbolTableEntry entry=(SymbolTableEntry)symtab.get(name);
    if (entry.getRealEnd()) {
      int offset=entry.getEndOffset();
 			Element elem = currentDocument.getParagraphElement(offset);
      return elem.getStartOffset();
    }
    else return entry.getEndOffset();
  }

  public String getShortTypeOfField(String cls,String field) {
    SymbolTableEntry entry=(SymbolTableEntry)symtab.get(cls);
    if (entry==null) return null;
    SymbolTableEntry fieldEntry=(SymbolTableEntry)entry.table.get(field);
    if (fieldEntry==null) return null;
    return fieldEntry.getType();
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
