/*
 * $Header: /AntIDE/source/ant/codecontext/SymbolTableEntry.java 10    99-06-01 12:44p Kahn $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 10 $
 * Part : Symbol Table Entry Class.
 * Author: Kim, Sung-hoon(kahn@antj.com)
 * Dated at 99.2.4.
 *
 * Version 1.0.0 (starting)
 */

package com.antsoft.ant.codecontext;

import java.util.Hashtable;
import java.io.Serializable;
import java.util.Vector;

/**
  @author Kim, Sung-Hoon.
  */
public class SymbolTableEntry implements Serializable {
	protected String typ;				// the type of the data or the super class of the this class.
	protected String accessTyp;		// the access type of the data.
	protected int s;					// the first appearance position in linear.
	protected int e;					// the last appearance position in linear.
  protected int memberSort;			// the sort of the member.(etc, import declaration, ...)
	protected Hashtable table=new Hashtable();
	protected int depth;				// the depth.
  protected String superClass=null;
  protected Vector implementsInterfaces=null;
  protected Vector parameters = null;

  private boolean realEndFlag=true;   // for add Event Handler or method.

  public static final int IMPORT=0;
  public static final int CLASS=1;
  public static final int FIELD=2;
  public static final int METHOD=3;
  public static final int CONSTRUCTOR=4;
  public static final int PACKAGE=5;
  public static final int INTERFACE=6;
  public static final int OTHERS=8;

  public void setSuperClass(String su) {
    superClass=su;
  }

  public String getSuperClass() {
    return superClass;
  }

	/**
	  set the specified type.

	  @param p type name.
	  */
	public void setType(String p) {
		typ=p;
	}

	/**
	  set the specified access type.

	  @param p access type name.
	  */
	public void setAccessType(String p) {
		accessTyp=p;
	}

	/**
	  set the start offset in the whole document.

	  @param p start offset.
	  */
	public void setStartOffset(int p) {
		s=p;
	}

	/**
	  set the end offset in the whole document.

	  @param p end offset.
	  */
	public void setEndOffset(int p) {
		e=p;
	}

	/**
	  set the member sort in the whole document.

	  @param p member sort as the int.
	  */
	public void setMemberSort(int p) {
		memberSort=p;
	}

	/**
	  get the the type.

	  @return the type as String.
	  */
	public String getType() {
		return typ;
	}

	/**
	  get the the access type.

	  @return the access type as String.
	  */
	public String getAccessType() {
		return accessTyp;
	}

	/**
	  get the start offset in the whole document.

	  @return start offset.
	  */
	public int getStartOffset() {
		return s;
	}

	/**
	  get the end offset in the whole document.

	  @return end offset.
	  */
	public int getEndOffset() {
		return e;
	}

	/**
	  get the member sort in the whole document.

	  @return member sort as the final variable.
	  */
	public int getMemberSort() {
		return memberSort;
	}

  public String toString() {
    StringBuffer buf=new StringBuffer();
    buf.append(typ+" "+accessTyp+" "+s+" "+e+" "+memberSort);
    return buf.toString();
  }

  /**
     get the depth of this element.
     @return depth as int value.
    */
  public int getDepth() {
  	return depth;
  }

  /**
    set the depth of this element.

    @param d depth as int value.
    */
  public void setDepth(int d) {
  	depth=d;
  }

  public boolean getRealEnd() {
    return realEndFlag;
  }

  public void setRealEnd(boolean f) {
    realEndFlag=f;
  }

  public void addImplementsInterface(String interfaceName) {
    if (implementsInterfaces==null) implementsInterfaces = new Vector();
    implementsInterfaces.addElement(interfaceName);
  }

  public Vector getImplementsInterfaces() {
    return implementsInterfaces;
  }

  public void addParameter(String param) {
    if (parameters==null) parameters = new Vector();
    parameters.addElement(param);
  }

  public Vector getParameters() {
    return parameters;
  }
}
