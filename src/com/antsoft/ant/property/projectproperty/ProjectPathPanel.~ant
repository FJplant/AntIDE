/*
 * $Header: /AntIDE/source/ant/property/projectproperty/ProjectPathPanel.java 4     99-06-01 11:54a Itree $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 4 $
 */
package com.antsoft.ant.property.projectproperty;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.util.Vector;
import com.antsoft.ant.util.FontList;
import com.antsoft.ant.util.BorderList;

import com.antsoft.ant.property.*;


/**
 * path property를 설정할수 있는 panel
 */
public class ProjectPathPanel extends JPanel {
  private JComboBox jdkCombo;
  private JdkComboBoxModel jdkComboModel;

  private JTextField sourceTf, outputTf, documentTf;
  private JList libraryList;
  private JScrollPane scrLibPane;
  private LibraryListModel libModel;
  private DefaultListSelectionModel libListSelectModel;
  private JButton sourceBtn, outputBtn, documentBtn, libAddBtn, libRemoveBtn;

  private PathPropertyInfo pathPropertyInfo;
  private LibInfoContainer allLibInfos;
  private JFrame parent;

  public ProjectPathPanel(JFrame parent) {
    this.parent = parent;
    setLayout(new BorderLayout());
    setBorder(BorderList.etchedBorder5);
    Box box = Box.createVerticalBox();

    ActionListener al = new ActionHandler();

    //jdk panel

    JLabel jdkLbl = new JLabel("JDK", JLabel.LEFT);
    jdkLbl.setFont(FontList.boldFont);
    jdkLbl.setForeground(Color.black);
    JPanel jdkLblP = new JPanel(new BorderLayout());
    jdkLblP.add(jdkLbl, BorderLayout.WEST);

    //jdkCombo panel
    jdkComboModel = new JdkComboBoxModel();

    jdkCombo = new JComboBox();
    jdkCombo.setModel(jdkComboModel);

    JPanel jdkP = new JPanel(new BorderLayout());
    jdkP.add(jdkCombo, BorderLayout.CENTER);

    jdkP.setBorder(BorderList.lightLoweredBorder);

    //source panel
    JLabel srcLbl = new JLabel("Source Root", JLabel.LEFT);
    srcLbl.setForeground(Color.black);
    JPanel srcLblP = new JPanel(new BorderLayout());
    srcLblP.add(srcLbl, BorderLayout.WEST);

    srcLbl.setHorizontalAlignment(SwingConstants.LEFT);
    sourceTf = new JTextField(20);
    sourceBtn = new JButton("    Edit    ");
    sourceBtn.setActionCommand("SOURCE");
    sourceBtn.addActionListener(al);

    JPanel sourceTfP = new JPanel(new BorderLayout());
    sourceTfP.add(sourceTf, BorderLayout.CENTER);
    sourceTfP.add(sourceBtn, BorderLayout.EAST);
    sourceTfP.setBorder(BorderList.lightLoweredBorder);

    //output panel
    JLabel outputLbl = new JLabel("Output Root", JLabel.LEFT);
    outputLbl.setForeground(Color.black);
    JPanel outputLblP = new JPanel(new BorderLayout());
    outputLblP.add(outputLbl, BorderLayout.WEST);

    outputTf = new JTextField(20);
    outputBtn = new JButton("    Edit    ");
    outputBtn.setActionCommand("OUTPUT");
    outputBtn.addActionListener(al);

    JPanel outputTfP = new JPanel(new BorderLayout());
    outputTfP.add(outputTf, BorderLayout.CENTER);
    outputTfP.add(outputBtn, BorderLayout.EAST);
    outputTfP.setBorder(BorderList.lightLoweredBorder);

    //document panel
    JLabel documentLbl = new JLabel("Document Root", JLabel.LEFT);
    documentLbl.setForeground(Color.black);
    JPanel documentLblP = new JPanel(new BorderLayout());
    documentLblP.add(documentLbl, BorderLayout.WEST);

    documentTf = new JTextField(20);
    documentBtn = new JButton("    Edit    ");
    documentBtn.setActionCommand("DOCUMENT");
    documentBtn.addActionListener(al);

    JPanel documentTfP = new JPanel(new BorderLayout());
    documentTfP.add(documentTf, BorderLayout.CENTER);
    documentTfP.add(documentBtn, BorderLayout.EAST);
    documentTfP.setBorder(BorderList.lightLoweredBorder);

    //library list
    JLabel libLbl = new JLabel("Libraries", JLabel.LEFT);
    libLbl.setForeground(Color.black);
    JPanel libLblP = new JPanel(new BorderLayout());
    libLblP.add(libLbl, BorderLayout.WEST);

    libModel = new LibraryListModel();

    libraryList = new JList();
    libraryList.setModel(libModel);

    scrLibPane = new JScrollPane(libraryList);
    scrLibPane.setBorder(BorderList.lightLoweredBorder);

    libAddBtn = new JButton("Add");
    libAddBtn.setActionCommand("LIBADD");
    libAddBtn.addActionListener(al);

    libRemoveBtn = new JButton("Remove");
    libRemoveBtn.setActionCommand("LIBREMOVE");
    libRemoveBtn.addActionListener(al);

    JPanel btnP = new JPanel(new GridLayout(2,1));
    btnP.add(libAddBtn);
    btnP.add(libRemoveBtn);
    btnP.setBorder(BorderList.lightLoweredBorder);

    JPanel btnRapP = new JPanel(new BorderLayout());
    btnRapP.add(btnP, BorderLayout.NORTH);


    JPanel libP = new JPanel(new BorderLayout());
    libP.add(scrLibPane, BorderLayout.CENTER);
    libP.add(btnRapP, BorderLayout.EAST);

    box.add(jdkLblP);
    box.add(jdkP);
    box.add(srcLblP);
    box.add(sourceTfP);
    box.add(outputLblP);
    box.add(outputTfP);
    box.add(documentLblP);
    box.add(documentTfP);
    box.add(libLblP);

    JPanel wrapP = new JPanel(new BorderLayout());
    wrapP.add(box, BorderLayout.NORTH);
    wrapP.add(libP, BorderLayout.CENTER);

    add(wrapP, BorderLayout.CENTER);
    add(new JPanel(), BorderLayout.NORTH);
    add(new JPanel(), BorderLayout.SOUTH);
    add(new JPanel(), BorderLayout.EAST);
    add(new JPanel(), BorderLayout.WEST);
  }

  /**
   * set Path model
   *
   * @param newModel new PathModel
   */
  public void setModel(DefaultPathModel newModel){
    this.allLibInfos = newModel.getAllLibInfoContainer();

    //source, output root directory 정보를 채운다
    sourceTf.setText(newModel.getSourceRoot());
    outputTf.setText(newModel.getOutputRoot());
    documentTf.setText(newModel.getDocumentRoot());

    //jdkInfo combobox 정보를 채운다
    jdkComboModel.setJdkInfoContainer(newModel.getJdkInfoContainer());

    if(newModel.getCurrentJdkInfo() != null){
      jdkComboModel.setSelectedItem(newModel.getCurrentJdkInfo());
    }

    //선택된 libInfo list 정보를 채운다
    LibInfoContainer lic = newModel.getSelectedLibInfoContainer();
    libModel.setLibInfoContainer(lic);
  }

  public DefaultPathModel getModel(){
    DefaultPathModel ret = new DefaultPathModel();
    ret.setJdkInfoContainer(jdkComboModel.getJdkInfoContainer());
    ret.setAllLibInfoContainer(this.allLibInfos);
    ret.setCurrentJdkInfo((JdkInfo)jdkComboModel.getSelectedItem());
    ret.setSelectedLibInfoContainer(libModel.getLibInfoContainer());
    ret.setSourceRoot(sourceTf.getText());
    ret.setOutputRoot(outputTf.getText());
    ret.setDocumentRoot(documentTf.getText());

    return ret;
  }

  /**
   * source root select button handler
   */
  public void sourceBtnSelected(){

    JFileChooser filechooser = new JFileChooser();
    filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("Select Source Root Directory");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("Source Root Directory");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();
      sourceTf.setText(f.getAbsolutePath());
    }
  }

  public void outputBtnSelected(){

    JFileChooser filechooser = new JFileChooser();
    filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("Select Output Root Directory");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("Output Root Directory");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();
      outputTf.setText(f.getAbsolutePath());
    }
  }

  public void documentBtnSelected(){

    JFileChooser filechooser = new JFileChooser();
    filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("Select Document Root Directory");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("Document Root Directory");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();
      documentTf.setText(f.getAbsolutePath());
    }
  }


  public void libAddBtnSelected(){

    ProjectLibAddDlg dlg = new ProjectLibAddDlg(parent, "Library Property Setup", true,
                                               (LibInfoContainer)allLibInfos.clone());
    dlg.setBounds(200, 200, 500, 300);
    dlg.setVisible(true);

    if(dlg.isOk()){

      LibInfo selectedLib = dlg.getSelectedLibInfo();
      if(selectedLib != null && libModel.indexOf(selectedLib) == -1){
        libModel.addElement(selectedLib);
      }

      if(dlg.getLibInfos() != null)  this.allLibInfos = dlg.getLibInfos();

      for(int i=0; i<libModel.getSize(); i++){
        LibInfo info = (LibInfo)libModel.getElementAt(i);
        libModel.setElementAt((LibInfo)allLibInfos.getLibraryInfo(info.getName()), i);
      }
    }
  }

  private void libRemoveBtnSelected(){
    if(libModel.getSize() > 0 && !libraryList.isSelectionEmpty()){
      libModel.removeElementAt(libraryList.getSelectedIndex());
    }
  }

  //ActionEvent Handler
  class ActionHandler implements ActionListener{

    public void actionPerformed(ActionEvent e){
      String cmd = e.getActionCommand();

      if(cmd.equals("SOURCE")){
        sourceBtnSelected();
      }

      else if(cmd.equals("OUTPUT")){
        outputBtnSelected();
      }

      else if(cmd.equals("DOCUMENT")){
        documentBtnSelected();
      }

      else if(cmd.equals("LIBADD")){
        libAddBtnSelected();
      }

      else if(cmd.equals("LIBREMOVE")){
        libRemoveBtnSelected();
      }
    }
  }
}
