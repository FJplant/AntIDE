/*
 * $Header: /AntIDE/source/ant/property/LibraryPropertyDlg.java 10    99-05-29 6:28p Remember $
 * Ant ( JDK wrapper Java IDE )
 * Version 1.0
 * Copyright (c) 1998-1999 Antsoft Co. All rights reserved.
 *  This program and source file is protected by Korea and international
 * Copyright laws.
 *
 * $Revision: 10 $
 */
package com.antsoft.ant.property;

import javax.swing.event.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Enumeration;
import java.util.Vector;
import java.util.StringTokenizer;
import com.antsoft.ant.util.*;

/**
 * library property를 설정하는 dialog
 *
 * @author kim sang kyun
 */

public class LibraryPropertyDlg extends JDialog{
  private JTextField nameTf, classPathTf, sourcePathTf, docPathTf;
  private JButton classPathBtn, sourcePathBtn, docPathBtn, okBtn,
                  cancelBtn, addBtn, removeBtn, editBtn;
  private JList libList;
  private LibraryListModel libListModel;
  private DefaultListSelectionModel libListSelectModel;

  private JFrame parent;
  private LibInfoContainer libInfoContainer;
  private JLabel nameLbl, classPathLbl, sourcePathLbl, docPathLbl;
  private JScrollPane libPane;

  private LibInfo selectedLibInfo;
  private Vector removedLibs;

  private LibInfo currentEditingLibInfo = null;
  private LibInfoContainer libInfos;

  private Icon errorIcon = new ImageIcon(getClass().getResource("image/errorimage.gif"));
  private boolean isOK = false;


  public LibraryPropertyDlg(JFrame f, String title, boolean modal, LibInfoContainer libInfos) {

    super(f, title, modal);

    addKeyListener(new KeyAdapter(){
      public void keyPressed(KeyEvent e){
        if(e.getKeyCode() == KeyEvent.VK_ESCAPE) dispose();
      }
    });

    this.libInfos = libInfos;
    this.parent = f;
    getContentPane().setLayout(new BorderLayout());
    ActionListener al = new ActionHandler();
    removedLibs = new Vector(3, 2);


    //left top panel
    Box rightTop = Box.createVerticalBox();

    //library name label
    nameLbl = new JLabel("Name", JLabel.LEFT);
    nameLbl.setEnabled(false);
    nameLbl.setForeground(Color.black);
    JPanel nameLblP = new JPanel(new BorderLayout());
    nameLblP.add(nameLbl, BorderLayout.WEST);

    //java.exe text field
    nameTf = new JTextField(20);
    nameTf.setEnabled(false);
    nameTf.setFont(FontList.myTextFieldFont);

    JLabel emptyLbl = new JLabel("      ");

    JPanel javaP = new JPanel(new BorderLayout());
    javaP.add(nameTf, BorderLayout.CENTER);
    javaP.add(emptyLbl, BorderLayout.EAST);

    //class path label
    classPathLbl = new JLabel("Class Path", JLabel.LEFT);
    classPathLbl.setEnabled(false);
    classPathLbl.setForeground(Color.black);
    JPanel classPathLblP = new JPanel(new BorderLayout());
    classPathLblP.add(classPathLbl, BorderLayout.WEST);

    //class path text field
    classPathTf = new JTextField(20);
    classPathTf.setFont(FontList.myTextFieldFont);
    classPathTf.setEnabled(false);
    classPathBtn = new JButton("...");
    classPathBtn.setMargin(new Insets(1, 2, 1, 2));
    classPathBtn.setEnabled(false);
    classPathBtn.setActionCommand("CLASSPATH");
    classPathBtn.addActionListener(al);

    JPanel classPathP = new JPanel(new BorderLayout());
    classPathP.add(classPathTf, BorderLayout.CENTER);
    classPathP.add(classPathBtn, BorderLayout.EAST);

    //source path label
    sourcePathLbl = new JLabel("Source Path", JLabel.LEFT);
    sourcePathLbl.setEnabled(false);
    sourcePathLbl.setForeground(Color.black);
    JPanel sourcePathLblP = new JPanel(new BorderLayout());
    sourcePathLblP.add(sourcePathLbl, BorderLayout.WEST);

    //source path text field
    sourcePathTf = new JTextField(20);
    sourcePathTf.setFont(FontList.myTextFieldFont);
    sourcePathTf.setEnabled(false);
    sourcePathBtn = new JButton("...");
    sourcePathBtn.setMargin(new Insets(1, 2, 1, 2));
    sourcePathBtn.setEnabled(false);
    sourcePathBtn.setActionCommand("SOURCE");
    sourcePathBtn.addActionListener(al);

    JPanel sourcePathP = new JPanel(new BorderLayout());
    sourcePathP.add(sourcePathTf, BorderLayout.CENTER);
    sourcePathP.add(sourcePathBtn, BorderLayout.EAST);

    //source path label
    docPathLbl = new JLabel("Doc Path");
    docPathLbl.setEnabled(false);
    docPathLbl.setForeground(Color.black);
    JPanel docPathLblP = new JPanel(new BorderLayout());
    docPathLblP.add(docPathLbl, BorderLayout.WEST);

    //source path text field
    docPathTf = new JTextField(20);
    docPathTf.setFont(FontList.myTextFieldFont);
    docPathTf.setEnabled(false);
    docPathBtn = new JButton("...");
    docPathBtn.setMargin(new Insets(1, 2, 1, 2));
    docPathBtn.setEnabled(false);
    docPathBtn.setActionCommand("DOC");
    docPathBtn.addActionListener(al);

    JPanel docPathP = new JPanel(new BorderLayout());
    docPathP.add(docPathTf, BorderLayout.CENTER);
    docPathP.add(docPathBtn, BorderLayout.EAST);

    //rightTop.add(nameLblP);
    rightTop.add(javaP);
    rightTop.add(classPathLblP);
    rightTop.add(classPathP);
    rightTop.add(sourcePathLblP);
    rightTop.add(sourcePathP);
    rightTop.add(docPathLblP);
    rightTop.add(docPathP);

    //button paenl
    okBtn = new JButton("OK");
    okBtn.setActionCommand("OK");
    okBtn.addActionListener(al);

    cancelBtn = new JButton("Cancel");
    cancelBtn.setActionCommand("CANCEL");
    cancelBtn.addActionListener(al);


    JPanel buttonP = new JPanel(new FlowLayout(FlowLayout.LEFT));
    buttonP.add(okBtn);
    buttonP.add(cancelBtn);

    JPanel rightP = new JPanel(new BorderLayout());

    rightP.add(rightTop, BorderLayout.CENTER);
    rightP.add(buttonP, BorderLayout.SOUTH);

    //left panel
    JPanel leftP = new JPanel(new BorderLayout());
    leftP.setPreferredSize(new Dimension(225, 5));
 
    //library list label
    JLabel libListLbl = new JLabel("Library List", JLabel.LEFT);
    libListLbl.setForeground(Color.black);
    JPanel libListLblP = new JPanel(new BorderLayout());
    libListLblP.add(libListLbl, BorderLayout.WEST);

    //jdk list
    libList = new JList();
    libList.setFont(FontList.myTextFieldFont);
    libListModel = new LibraryListModel(libInfos);
    libList.setModel(libListModel);

    ListSelectionListener lsl = new ListSelectionHandler();
    libListSelectModel = new DefaultListSelectionModel();
    libListSelectModel.addListSelectionListener(lsl);
    libList.setSelectionModel(libListSelectModel);

    //jdk list scroll pane
    libPane = new JScrollPane(libList);

    //jdk list button panel
    JPanel libBtnP = new JPanel();

    addBtn = new JButton("Add");
    addBtn.setActionCommand("ADD");
    addBtn.addActionListener(al);

    removeBtn = new JButton("Remove");
    removeBtn.setActionCommand("REMOVE");
    removeBtn.addActionListener(al);

    editBtn = new JButton("Edit");
    editBtn.setActionCommand("EDIT");
    editBtn.addActionListener(al);

    libBtnP.add(new JPanel(new FlowLayout(FlowLayout.RIGHT)));
    libBtnP.add(addBtn);
    libBtnP.add(removeBtn);
    libBtnP.add(editBtn);

    leftP.add(libListLblP, BorderLayout.NORTH);
    leftP.add(libPane, BorderLayout.CENTER);
    leftP.add(libBtnP, BorderLayout.SOUTH);

    //top panel
    JPanel topP = new JPanel(new BorderLayout(170,0));
    topP.add(nameLblP, BorderLayout.CENTER);
    topP.add(libListLblP, BorderLayout.WEST);

    //center panel
    JPanel centerP = new JPanel(new BorderLayout(10, 1));
    centerP.add(leftP, BorderLayout.WEST);
    centerP.add(rightP, BorderLayout.CENTER);

    //main panel
    JPanel mainP = new JPanel(new BorderLayout());
    mainP.setBorder(BorderList.etchedBorder10);
    mainP.add(topP, BorderLayout.NORTH);
    mainP.add(centerP, BorderLayout.CENTER);

    //focus setting
    nameTf.setNextFocusableComponent(classPathTf);
    classPathTf.setNextFocusableComponent(sourcePathTf);
    sourcePathTf.setNextFocusableComponent(docPathTf);

    getContentPane().add(mainP, BorderLayout.CENTER);
    getContentPane().add(new JPanel(), BorderLayout.NORTH);
    getContentPane().add(new JPanel(), BorderLayout.EAST);
    getContentPane().add(new JPanel(), BorderLayout.WEST);
    getContentPane().add(new JPanel(), BorderLayout.SOUTH);
  }

  public boolean isOk(){
    return this.isOK;
  }

  public LibInfoContainer getLibInfos(){
    return this.libInfos;
  }

  public LibInfo getSelectedLibInfo(){
    return selectedLibInfo;
  }

  public void classPathBtnSelected(){

    ExtensionFileFilter filter = new ExtensionFileFilter();
    filter.addExtension("jar");
    filter.addExtension("zip");

    JFileChooser filechooser = new JFileChooser();

    filechooser.setFileFilter(filter);
    filechooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    filechooser.setMultiSelectionEnabled(false);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("ClassPath");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("ClassPath");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();

      if(!classPathTf.getText().equals("")){
        classPathTf.setText(classPathTf.getText() + ", " + f.getAbsolutePath());
      }
      else{
        classPathTf.setText(f.getAbsolutePath());
      }
    }
  }

  public void sourceBtnSelected(){

    ExtensionFileFilter filter = new ExtensionFileFilter();
    filter.addExtension("jar");
    filter.addExtension("zip");

    JFileChooser filechooser = new JFileChooser();
    filechooser.setFileFilter(filter);

    filechooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("Select JDK Source Directory");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("Output Root Directory");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();
      sourcePathTf.setText(f.getAbsolutePath());
    }
  }

  public void docBtnSelected(){

    JFileChooser filechooser = new JFileChooser();
    filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    filechooser.setPreferredSize(new Dimension(400, 300));
    filechooser.setApproveButtonText("Select");
    filechooser.setApproveButtonToolTipText("Select JDK Doc Directory");
    filechooser.setBorder(BorderList.lightLoweredBorder);
    filechooser.setDialogTitle("Output Root Directory");

    if(filechooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File f = filechooser.getSelectedFile();
      docPathTf.setText(f.getAbsolutePath());
    }
  }

 public void editBtnSelected(){

    LibInfo libInfo = (LibInfo)libListModel.getElementAt(libList.getSelectedIndex());
    this.currentEditingLibInfo = libInfo;

    nameTf.setText(libInfo.getName());
    classPathTf.setText(libInfo.getClassPathString());
    sourcePathTf.setText(libInfo.getSourcePath());
    docPathTf.setText(libInfo.getDocPath());
  }

  public void removeBtnSelected(){
    if(libListModel.getSize() > 0 && !libListSelectModel.isSelectionEmpty()){
      removedLibs.addElement(libListModel.getElementAt(libList.getSelectedIndex()));
      libListModel.removeElementAt(libList.getSelectedIndex());
    }

    setEnableFlag(false);
    setEmptyFieldEnabled();
  }

  public void doneBtnSelected(){
    File classPathF = new File(classPathTf.getText());
    File source = new File(sourcePathTf.getText());
    File doc = new File(docPathTf.getText());

    if(classPathTf.getText().length() > 0 && !classPathF.exists()){
      JOptionPane.showMessageDialog(null, "Class Path not avaliable", "Error", JOptionPane.ERROR_MESSAGE, errorIcon );
      return;
    }

    else if(sourcePathTf.getText().length() > 0 && !source.exists()){
      JOptionPane.showMessageDialog(null, "Source Path not avaliable", "Error", JOptionPane.ERROR_MESSAGE, errorIcon );
      return;
    }

    else if(docPathTf.getText().length() > 0 && !doc.exists()){
      JOptionPane.showMessageDialog(null, "Doc Path not avaliable", "Error", JOptionPane.ERROR_MESSAGE, errorIcon );
      return;
    }  

    Vector classPath = new Vector();
    StringTokenizer st = new StringTokenizer(classPathTf.getText(), "," , false);

    if(st.countTokens() == 0){
      classPath.addElement(classPathTf.getText());
    }
    else{
      while(st.hasMoreTokens()) {
        String token = st.nextToken();
        classPath.addElement(token);
      }
    }

    if(this.currentEditingLibInfo == null){
      LibInfo libInfo = new LibInfo(nameTf.getText(), classPath, sourcePathTf.getText(), docPathTf.getText());
      libListModel.addElement(libInfo);
    }
    else{
      removedLibs.addElement(currentEditingLibInfo.clone());

      currentEditingLibInfo.setName(nameTf.getText());
      currentEditingLibInfo.setClassPath(classPath);
      currentEditingLibInfo.setSourcePath(sourcePathTf.getText());
      currentEditingLibInfo.setDocPath(docPathTf.getText());

      libListModel.fireUpdate(currentEditingLibInfo, libList.getSelectedIndex());
      currentEditingLibInfo = null;
    }

    setEnableFlag(false);
    setEmptyFieldEnabled();
  }

  public void okBtnSelected(){
    if(nameTf.isEnabled()) doneBtnSelected();
    else{
      if(!libList.isSelectionEmpty()){
        this.selectedLibInfo = (LibInfo)libListModel.getElementAt(libList.getSelectedIndex());
      }
      this.isOK = true;
      dispose();
    }
  }

  public Vector getRemovedLibs(){
    return this.removedLibs;
  }

  /** libList selection event handler */
  class ListSelectionHandler implements ListSelectionListener{

    public void valueChanged(ListSelectionEvent e){
      LibInfo selectedLib = (LibInfo)libListModel.getElementAt(libList.getSelectedIndex());
      setEnableFlag(false);

      nameTf.setText(selectedLib.getName());
      classPathTf.setText(selectedLib.getClassPathString());
      sourcePathTf.setText(selectedLib.getSourcePath());
      docPathTf.setText(selectedLib.getDocPath());
    }
  }

  private void setEnableFlag(boolean flag){
    nameTf.setEnabled(flag);
    classPathTf.setEnabled(flag);
    sourcePathTf.setEnabled(flag);
    docPathTf.setEnabled(flag);

    classPathBtn.setEnabled(flag);
    sourcePathBtn.setEnabled(flag);
    docPathBtn.setEnabled(flag);

    nameLbl.setEnabled(flag);
    classPathLbl.setEnabled(flag);
    sourcePathLbl.setEnabled(flag);
    docPathLbl.setEnabled(flag);
  }

  private void setEmptyFieldEnabled(){
    nameTf.setText("");
    classPathTf.setText("");
    sourcePathTf.setText("");
    docPathTf.setText("");
  }

  /** action event handler */
  class ActionHandler implements ActionListener{

    public void actionPerformed(ActionEvent e){
      String cmd = e.getActionCommand();

      if(cmd.equals("CLASSPATH")){
        classPathBtnSelected();
      }

      else if(cmd.equals("SOURCE")){
        sourceBtnSelected();
      }

      else if(cmd.equals("DOC")){
        docBtnSelected();
      }

      else if(cmd.equals("ADD")){
        setEnableFlag(true);
        setEmptyFieldEnabled();
        nameTf.requestFocus();
      }

      else if(cmd.equals("EDIT")){
        if(!libListSelectModel.isSelectionEmpty()){
          setEnableFlag(true);
          nameTf.requestFocus();
          editBtnSelected();
        }
      }

      else if(cmd.equals("OK")){
        okBtnSelected();
      }

      else if(cmd.equals("REMOVE")){
        if(!libListSelectModel.isSelectionEmpty()) removeBtnSelected();
      }

      else if(cmd.equals("DONE")){
        if(nameTf.getText().equals("")){
          JOptionPane.showMessageDialog(null, "Library Name is not specified!!", "Error", JOptionPane.ERROR_MESSAGE, errorIcon );
        }

        else if(classPathTf.getText().equals("")){
          JOptionPane.showMessageDialog(null, "CLASSPATH is not specified!!", "Error", JOptionPane.ERROR_MESSAGE, errorIcon );
        }
      }

      else if(cmd.equals("CANCEL")){
        isOK = false;
        dispose();
      }
    }
  }
}
