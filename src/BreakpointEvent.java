// This snippet takes advantage of JBuilder's ability to define
// multiple public classes in a single source file.  This is not
// recommended and is only used here as an example.
// Each class should be pasted into its own .java file.
// You will see warnings to remind you when you compile.


// Snippet Note: Use the parameter button to change the name of the event class.

package  com.antsoft.ant.debugger;

import java.util.*;

// This defines a new event, with minimum state.
/**
 * Break Point를 설정, 해재할 때에 사용을 하고,
 * Break Point가 걸렸을 때에 발생한다.
 */
public class BreakpointEvent extends EventObject {
  static final int BREAKPOINT_OCCURED=1;
  static final int BREAKPOINT_REMOVED=2;
  static final int BREAKPOINT_ADDED=3;
  private int id=0;
  private boolean stopAt;
  // Used when stopAt is false;
  private String clazz;
  private String method;
  private String args;

  // used when stopAt is true;
  private String source;
  private int line;

  public int getID() {return id;};

  BreakpointEvent(Object source,int i) {
    super(source);
    id=i;
  }

  BreakpointEvent(Object source, int i, String clazz, String method) {
    this(source, i);
    stopAt = false;

    this.clazz = clazz;
    this.method = method;
  }

  BreakpointEvent(Object source, int i, String clazz, String method, String args) {
    this(source, i, clazz, method);
    this.args = args;
  }

  BreakpointEvent(Object source, int i, String source, int line) {
    this(source, i);
    stopAt = true;

    this.source = source;
    this.line = line;
  }

  public boolean isStopAt() {
    return stopAt;
  }

  public void setBreakPointIn() {

  }

  public String getBreakPointIn() {

  }
}

// This defines a listener interface for the set of events that
// are generated by BreakpointEvent
public interface BreakpointEventListener extends EventListener {
  public void breakpointOccured(BreakpointEvent e);
  public void breakpointRemoved(BreakpointEvent e);
  public void breakpointAdded(BreakpointEvent e);
}

// This is an example of a non-visual Bean that fires the new events
public class BreakpointEventExampleBean {
  public BreakpointEventExampleBean() {
  }

  // The add/remove methods provide the signature for the IDE to recognize
  // these events and show them in the event list
  public synchronized void addBreakpointEventListener(BreakpointEventListener l) {
    listenerList.addElement(l);
  }
  public synchronized void removeBreakpointEventListener(BreakpointEventListener l){
    listenerList.removeElement(l);
  }

  // A single process method keeps all event dispatching in one place.
  // Separate processEVENT1, processEVENT2, etc methods could also be used.
  protected void processBreakpointEvent(BreakpointEvent e) {
    switch (e.getID()) {
      case BreakpointEvent.BREAKPOINT_ADDED:
        for (int i=0; i<listenerList.size(); i++)
          //Send event to all registered listeners
          ((BreakpointEventListener)listenerList.elementAt(i)).breakpointOccured(e);
        break;
      case BreakpointEvent.BREAKPOINT_OCCURED:
        for (int i=0; i<listenerList.size(); i++)
          ((BreakpointEventListener)listenerList.elementAt(i)).breakpointRemoved(e);
        break;
      case BreakpointEvent.BREAKPOINT_REMOVED:
        for (int i=0; i<listenerList.size(); i++)
          ((BreakpointEventListener)listenerList.elementAt(i)).breakpointAdded(e);
        break;
    }
  }

  // A test method to fire all 3 example events
  public void testBreakpointEvent () {
    processBreakpointEvent (new BreakpointEvent (this, BreakpointEvent.BREAKPOINT_ADDED));
    processBreakpointEvent (new BreakpointEvent (this, BreakpointEvent.BREAKPOINT_OCCURED));
    processBreakpointEvent (new BreakpointEvent (this, BreakpointEvent.BREAKPOINT_REMOVED));
  }

  private Vector listenerList = new Vector();
}
